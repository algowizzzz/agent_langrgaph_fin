2025-08-04 13:39:19,506 - verification_endpoints - INFO - üîí Verification endpoints added to application
2025-08-04 13:39:19,524 - asyncio - DEBUG - Using selector: KqueueSelector
INFO:     Started server process [75949]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
2025-08-04 13:39:30,904 - orchestrator_v2.state_management - INFO - Loaded persistent state from disk
2025-08-04 13:39:30,904 - orchestrator_v2.orchestrator_v2 - INFO - Orchestrator 2.0 LLM initialized: claude-3-5-sonnet-20241022
2025-08-04 13:39:30,904 - orchestrator_v2.planning_engine - INFO - Fixed Planning Engine initialized
2025-08-04 13:39:30,905 - orchestrator_v2.planning_engine_enhanced - INFO - Enhanced Planning Engine initialized with AI Finance and Risk Agent
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: upload_document (category: document)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: discover_document_structure (category: document)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: search_uploaded_docs (category: search)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: search_multiple_docs (category: search)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: get_all_documents (category: document)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: remove_document (category: document)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: synthesize_content (category: synthesis)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: search_knowledge_base (category: search)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: search_conversation_history (category: search)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: execute_python_code (category: computation)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: process_table_data (category: computation)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: calculate_statistics (category: computation)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: create_chart (category: visualization)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: create_wordcloud (category: visualization)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: create_statistical_plot (category: visualization)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: create_comparison_chart (category: visualization)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: analyze_text_metrics (category: analysis)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: extract_key_phrases (category: analysis)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: analyze_sentiment (category: analysis)
2025-08-04 13:39:30,905 - orchestrator_v2.tool_registry - INFO - Registered tool: extract_entities (category: analysis)
2025-08-04 13:39:30,905 - orchestrator_v2.orchestrator_v2 - INFO - Registered 20 tools across 6 categories
2025-08-04 13:39:30,905 - orchestrator_v2.orchestrator_v2 - INFO - Orchestrator 2.0 initialized successfully
2025-08-04 13:39:30,905 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 initialized successfully
üîß MODULE LOADED: document_tools.py at /Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/tools/document_tools.py
INFO:     127.0.0.1:65300 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:39:30,908 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: extract key insights, correlation_id: 4352dfa5-3ff0-45cf-8dce-e1cd0af84176
2025-08-04 13:39:30,909 - __main__ - INFO - Loaded memory context - short_term: 7, summaries: 3
2025-08-04 13:39:30,909 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:39:30,909 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: extract key insights...
2025-08-04 13:39:30,909 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 4406dd9b-338b-41b2-b9ec-d87ea0e1852a, Strategy: adaptive
2025-08-04 13:39:30,909 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:39:30,909 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'extract key insights...'
2025-08-04 13:39:30,909 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: data_analysis
2025-08-04 13:39:30,909 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:39:30,909 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DATA ANALYSIS DEBUG: active_documents=['20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'], doc_name=20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv
2025-08-04 13:39:30,909 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created data_analysis plan with 2 steps
2025-08-04 13:39:30,909 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:39:30,909 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:39:30,909 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: data_analysis_1754329170
2025-08-04 13:39:30,909 - orchestrator_v2.execution_engine - INFO - Executing step: search_table_data (search_uploaded_docs)
2025-08-04 13:39:30,909 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'extract key insights'}
2025-08-04 13:39:30,913 - orchestrator_v2.execution_engine - INFO - Step 'search_table_data' completed successfully
2025-08-04 13:39:30,913 - orchestrator_v2.execution_engine - INFO - Executing step: table_summary (synthesize_content)
2025-08-04 13:39:30,913 - tools.synthesis_tools - INFO - Synthesizing data_summary for query: 'extract key insights' from 0 documents
2025-08-04 13:39:30,913 - orchestrator_v2.execution_engine - INFO - Step 'table_summary' completed successfully
2025-08-04 13:39:30,913 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:39:30,943 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-29785a32-733d-46a1-a8da-e27b5ae929b9', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "extract key insights"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[]...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'error_type\': \'no_documents_provided\', \'success\': False, \'message\': \'No documents provided for synthesis\', \'suggested_action\': \'provide_document_content_or_search_results\', \'retryable\': False, \'replanning_hints\': {\'synthesis_failed\': True, \'reason\': \'No documents provided for synthesis\'}}...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:39:30,944 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:39:30,946 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:39:30,995 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a176510>
2025-08-04 13:39:30,995 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:39:31,018 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a178910>
2025-08-04 13:39:31,019 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:39:31,019 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:39:31,019 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:39:31,019 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:39:31,019 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:39:34,030 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:39:34 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:39:31Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:39:34Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:39:31Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:39:31Z'), (b'request-id', b'req_011CRo5Wu93UuqEGpncX3g84'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd5a76d43ac30-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:39:34,032 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:39:34,032 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:39:34,033 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:39:34,033 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:39:34,033 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:39:34,034 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:39:34 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:39:31Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:39:34Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:39:31Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:39:31Z', 'request-id': 'req_011CRo5Wu93UuqEGpncX3g84', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd5a76d43ac30-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:39:34,034 - anthropic._base_client - DEBUG - request_id: req_011CRo5Wu93UuqEGpncX3g84
2025-08-04 13:39:34,046 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 4406dd9b-338b-41b2-b9ec-d87ea0e1852a
2025-08-04 13:39:34,046 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:39:34,046 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:39:34,047 - __main__ - INFO - Added assistant response to memory - length: 623
2025-08-04 13:39:34,047 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 3137ms, correlation_id: 4352dfa5-3ff0-45cf-8dce-e1cd0af84176
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'extract key insights'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'
üîç SEARCH DEBUG: doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', in_store=True, store_keys=49
INFO:     127.0.0.1:65302 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:65442 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:39:50,445 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: summarize the business data, correlation_id: 1498c69b-85be-49de-b6a3-ef79f3fe5967
2025-08-04 13:39:50,445 - __main__ - INFO - Loaded memory context - short_term: 9, summaries: 3
2025-08-04 13:39:50,445 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:39:50,445 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: summarize the business data...
2025-08-04 13:39:50,445 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: e2c62e90-0f9e-40d7-9c68-df46e91a19ce, Strategy: adaptive
2025-08-04 13:39:50,445 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:39:50,445 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'summarize the business data...'
2025-08-04 13:39:50,445 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: data_analysis
2025-08-04 13:39:50,445 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:39:50,446 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DATA ANALYSIS DEBUG: active_documents=['20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'], doc_name=20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv
2025-08-04 13:39:50,446 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created data_analysis plan with 2 steps
2025-08-04 13:39:50,446 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:39:50,446 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:39:50,446 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: data_analysis_1754329190
2025-08-04 13:39:50,446 - orchestrator_v2.execution_engine - INFO - Executing step: search_table_data (search_uploaded_docs)
2025-08-04 13:39:50,446 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'summarize the business data'}
2025-08-04 13:39:50,446 - orchestrator_v2.execution_engine - INFO - Step 'search_table_data' completed successfully
2025-08-04 13:39:50,446 - orchestrator_v2.execution_engine - INFO - Executing step: table_summary (synthesize_content)
2025-08-04 13:39:50,446 - tools.synthesis_tools - INFO - Synthesizing data_summary for query: 'summarize the business data' from 1 documents
2025-08-04 13:39:50,447 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-be867fc6-8975-4faf-b7c7-c2252f86ec34', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please synthesize the following documents to address the query.\n\nQuery: summarize the business data\nSynthesis Type: data_summary\n\nDocuments:\n=== 1 ===\n# CSV Data: 20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%\n\nPlease provide a comprehensive response addressing the query based on the document content.\n\nResponse:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:39:50,447 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:39:50,447 - httpcore.connection - DEBUG - close.started
2025-08-04 13:39:50,447 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:39:50,447 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:39:50,466 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a17a5d0>
2025-08-04 13:39:50,466 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:39:50,484 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a0d3230>
2025-08-04 13:39:50,484 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:39:50,484 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:39:50,484 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:39:50,484 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:39:50,484 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:39:56,658 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:39:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:39:51Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:39:56Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:39:50Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:39:51Z'), (b'request-id', b'req_011CRo5YLEBwAURE1Ys8Jr5h'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd6211bb3a22e-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:39:56,658 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:39:56,659 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:39:56,659 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:39:56,659 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:39:56,659 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:39:56,660 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:39:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:39:51Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:39:56Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:39:50Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:39:51Z', 'request-id': 'req_011CRo5YLEBwAURE1Ys8Jr5h', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd6211bb3a22e-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:39:56,660 - anthropic._base_client - DEBUG - request_id: req_011CRo5YLEBwAURE1Ys8Jr5h
2025-08-04 13:39:56,661 - tools.synthesis_tools - INFO - Successfully synthesized data_summary for query 'summarize the business data'
2025-08-04 13:39:56,661 - orchestrator_v2.execution_engine - INFO - Step 'table_summary' completed successfully
2025-08-04 13:39:56,661 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:39:56,662 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-aa3e19c9-236e-436a-87ca-15f40aad5c6c', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "summarize the business data"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[{\'page_content\': \'# CSV Data: 20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv\\n\\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\\n Corporate Banking        450      180.5       145.2      35.3       12.5%\\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\\n Wealth Management        280       95.2        67.8      27.4       15.7%\\nInvestment Banking        180      220.3       165.9      54.4       22.1%\\n  Digital Services        350       78.9        62.1      16.8       45.2%\\n   Risk Management        125        0.0        28.5     -28.5          0%\\n        Operations        800        5.2        95.6     -90.4       -2.1%\\n        Technology        420       12.3       156.8    -144.5       18.9%\\n   Human Resources         85        0.0        18.7     -18.7          0%\\n         Marketing        120        2.1        45.3     -43.2       25.6%\', \'metadata\': {\'source\': \'global_uploads/20250801_21511...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'data_summary\', \'query\': \'summarize the business data\', \'result\': "Here\'s a summary of the key business data:\\n\\nOperational Overview:\\n- Total departments: 10\\n- Total employees: 4,010\\n- Total revenue: $915.3M\\n- Total expenses: $1,071.3M\\n- Net profit/loss: -$156M\\n\\nKey Performance Highlights:\\n- Most profitable department: Investment Banking ($54.4M profit)\\n- Highest revenue generator: Personal Banking ($320.8M)\\n- Largest department by employees: Personal Banking (1,200 employees)\\n- Highest growth rate: Digital Services (45.2%)\\n\\nDepartments by Profitability:\\nProfitable Units:\\n1. Investment Banking: $54.4M\\n2. Personal Banking: $35.4M\\n3. Corporate Banking: $35.3M\\n4. Wealth Management: $27.4M\\n5. Digital Services: $16.8M\\n\\nLoss-Making Units:\\n1. Technology: -$144.5M\\n2. Operations: -$90.4M\\n3. Marketing: -$43.2M\\n4. Risk Management: -$28.5M\\n5. Human Resources: -$18.7M\\n\\nNotable Observations:\\n- Support departments (HR, Risk Management)...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:39:56,663 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:39:56,663 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:39:56,664 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:39:56,664 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:39:56,664 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:39:56,664 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:02,596 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:39:57Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:02Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:39:56Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:39:57Z'), (b'request-id', b'req_011CRo5YnfAXrdcwUFLkqL6n'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd647bc8ea22e-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:40:02,597 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:02,597 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:02,597 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:02,597 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:02,598 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:02,598 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:39:57Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:02Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:39:56Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:39:57Z', 'request-id': 'req_011CRo5YnfAXrdcwUFLkqL6n', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd647bc8ea22e-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:40:02,598 - anthropic._base_client - DEBUG - request_id: req_011CRo5YnfAXrdcwUFLkqL6n
2025-08-04 13:40:02,600 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: e2c62e90-0f9e-40d7-9c68-df46e91a19ce
2025-08-04 13:40:02,600 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:40:02,600 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:40:02,606 - __main__ - INFO - Added assistant response to memory - length: 1330
2025-08-04 13:40:02,607 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 12155ms, correlation_id: 1498c69b-85be-49de-b6a3-ef79f3fe5967
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'summarize the business data'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'
üîç SEARCH DEBUG: doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', in_store=True, store_keys=49
INFO:     127.0.0.1:65444 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:49214 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:40:11,141 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what do these documents say, correlation_id: 2ff52feb-e8c3-4962-9729-73bd5b210917
2025-08-04 13:40:11,141 - __main__ - INFO - Loaded memory context - short_term: 6, summaries: 3
2025-08-04 13:40:11,141 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:40:11,141 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what do these documents say...
2025-08-04 13:40:11,141 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: a088efbe-72bc-4ce1-97e4-7bb561c1fd6e, Strategy: adaptive
2025-08-04 13:40:11,142 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:40:11,142 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what do these documents say...'
2025-08-04 13:40:11,142 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: multi_doc_comparison
2025-08-04 13:40:11,142 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:40:11,142 - orchestrator_v2.planning_engine_enhanced - ERROR - Enhanced planning error: 'financial_comparison'
2025-08-04 13:40:11,142 - orchestrator_v2.planning_engine - INFO - Creating execution plan for query: 'what do these documents say...' using adaptive strategy
2025-08-04 13:40:11,142 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-b3f14e1f-605f-44ea-8f7e-512a08d7a31a', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Create an execution plan for the user query using available tools.\n\nUser Query: what do these documents say\nSession ID: terminal-test-session\nActive Documents: [\'riskandfinace.pdf\', \'20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\']\nStrategy: adaptive\n\nAVAILABLE TOOLS WITH EXACT PARAMETER NAMES:\n- create_statistical_plot: Create statistical plots for data analysis\n  Parameters: {"data": List (REQUIRED), "plot_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- analyze_text_metrics: Analyze comprehensive text metrics and readability\n  Parameters: {"text": str (REQUIRED)}\n- discover_document_structure: Analyze document structure and extract metadata\n  Parameters: {"doc_name": str (REQUIRED)}\n- extract_key_phrases: Extract key phrases and important terms\n  Parameters: {"text": str (REQUIRED), "top_n": int (optional), "min_length": int (optional)}\n- upload_document: Process and store a document for analysis\n  Parameters: {"file_path": str (REQUIRED), "session_id": str (optional), "additional_metadata": dict (optional), "original_filename": str (optional)}\n- calculate_statistics: Calculate statistical metrics for numerical data\n  Parameters: {"data": List (REQUIRED), "metrics": List (optional)}\n- create_wordcloud: Generate word cloud visualizations\n  Parameters: {"text": str (REQUIRED), "max_words": int (optional), "save_path": Optional (optional)}\n- get_all_documents: Get list of all uploaded documents across sessions\n  Parameters: {}\n- analyze_sentiment: Perform sentiment analysis on text content\n  Parameters: {"text": str (REQUIRED)}\n- search_knowledge_base: Search the general knowledge base\n  Parameters: {"query": str (REQUIRED)}\n- create_comparison_chart: Create comparison charts with multiple datasets\n  Parameters: {"datasets": Dict (REQUIRED), "chart_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- process_table_data: Process and analyze tabular data\n  Parameters: {"table_data": List (REQUIRED), "operation": str (REQUIRED)}\n- execute_python_code: Execute Python code for data analysis and calculations\n  Parameters: {"code": str (REQUIRED), "context": Dict (optional)}\n- search_conversation_history: Search previous conversation history\n  Parameters: {"query": str (REQUIRED)}\n- search_uploaded_docs: Search within uploaded documents with filtering options\n  Parameters: {"doc_name": str (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- search_multiple_docs: Search across multiple documents simultaneously\n  Parameters: {"doc_names": List (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- remove_document: Remove a specific document from storage\n  Parameters: {"doc_name": str (REQUIRED)}\n- synthesize_content: Generate cohesive synthesis from multiple content chunks\n  Parameters: {"documents": List (REQUIRED), "query": str (REQUIRED), "synthesis_type": str (optional)}\n- extract_entities: Extract named entities from text\n  Parameters: {"text": str (REQUIRED)}\n- create_chart: Create various types of charts and graphs\n  Parameters: {"data": Dict (REQUIRED), "chart_type": str (REQUIRED), "title": str (optional), "save_path": Optional (optional)}\n\nCRITICAL PARAMETER RULES:\n- ALWAYS use exact parameter names shown above\n- For search_uploaded_docs: use "doc_name" (NOT "doc_id")\n- For synthesize_content: use "documents" and "query" (REQUIRED)\n- For extract_key_phrases: use "text" (NOT "text_input" or "input_text")\n- For create_wordcloud: use "text" (NOT "text_input")\n- For discover_document_structure: use "doc_name" (NOT "doc_id")\n\nCONDITION GUIDELINES:\n- Use "always" for steps that should always execute\n- Use "on_success" for steps that depend on previous step success\n- Use "on_failure" for error handling steps\n\nReturn a JSON plan with this structure:\n{\n    "strategy": "adaptive",\n    "steps": [\n        {\n            "id": "step_1",\n            "tool": "tool_name",\n            "parameters": {"exact_param_name": "value"},\n            "dependencies": [],\n            "condition": "always",\n            "description": "What this step does"\n        }\n    ]\n}\n\nCreate a plan that addresses the user query effectively using the available tools with EXACT parameter names.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:40:11,142 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:40:11,142 - httpcore.connection - DEBUG - close.started
2025-08-04 13:40:11,143 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:40:11,143 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:40:11,162 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a0d3490>
2025-08-04 13:40:11,162 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:40:11,179 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a2004d0>
2025-08-04 13:40:11,179 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:40:11,180 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:40:11,180 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:40:11,180 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:40:11,180 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:20,403 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:40:11Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:21Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:40:11Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:40:11Z'), (b'request-id', b'req_011CRo5ZrjmTZgHLo8Jmgjhf'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd6a2695d39f7-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:40:20,404 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:20,404 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:20,405 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:20,405 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:20,405 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:20,405 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:40:11Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:21Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:40:11Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:40:11Z', 'request-id': 'req_011CRo5ZrjmTZgHLo8Jmgjhf', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd6a2695d39f7-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:40:20,405 - anthropic._base_client - DEBUG - request_id: req_011CRo5ZrjmTZgHLo8Jmgjhf
2025-08-04 13:40:20,408 - orchestrator_v2.planning_engine - INFO - Created execution plan with 5 steps
2025-08-04 13:40:20,408 - orchestrator_v2.planning_engine - DEBUG - Step step_1: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:40:20,409 - orchestrator_v2.planning_engine - DEBUG - Step step_2: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:40:20,409 - orchestrator_v2.planning_engine - DEBUG - Step step_3: search_multiple_docs with condition ConditionType.ON_SUCCESS
2025-08-04 13:40:20,409 - orchestrator_v2.planning_engine - DEBUG - Step step_4: extract_key_phrases with condition ConditionType.ON_SUCCESS
2025-08-04 13:40:20,409 - orchestrator_v2.planning_engine - DEBUG - Step step_5: synthesize_content with condition ConditionType.ON_SUCCESS
2025-08-04 13:40:20,409 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 5 steps
2025-08-04 13:40:20,409 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: plan_1754329220
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Executing step: step_1 (discover_document_structure)
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Executing step: step_2 (discover_document_structure)
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Step 'step_1' completed successfully
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Step 'step_2' completed successfully
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Executing step: step_3 (search_multiple_docs)
2025-08-04 13:40:20,409 - orchestrator_v2.execution_engine - INFO - Step 'step_3' completed successfully
2025-08-04 13:40:20,410 - orchestrator_v2.execution_engine - INFO - Executing step: step_4 (extract_key_phrases)
2025-08-04 13:40:20,410 - orchestrator_v2.execution_engine - INFO - Step 'step_4' completed successfully
2025-08-04 13:40:20,410 - orchestrator_v2.execution_engine - INFO - Executing step: step_5 (synthesize_content)
2025-08-04 13:40:20,410 - tools.synthesis_tools - INFO - Synthesizing summary for query: 'Provide a comprehensive summary of the main points and content from both documents' from 2 documents
2025-08-04 13:40:20,411 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-37e5a453-8c43-497b-94f2-19c4fca1d6f6', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a comprehensive summary based on the following documents and query.\n\nQuery: Provide a comprehensive summary of the main points and content from both documents\n\nDocuments:\n\n\nYou are comparing 2 separate documents:\n1. 1\n2. 2\n\n=== 1 ===\nriskandfinace.pdf\n=== 2 ===\n20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\n\nPlease synthesize the information to answer the query with:\n1. A clear, direct answer to the query\n2. Supporting evidence from the documents\n3. Key insights and patterns\n4. Any limitations or gaps in the information\n\nSynthesis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:40:20,411 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:40:20,412 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:40:20,412 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:40:20,412 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:40:20,412 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:40:20,412 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:24,480 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:40:21Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:24Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:40:20Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:40:21Z'), (b'request-id', b'req_011CRo5aYALfkQBntMTdB37z'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd6dc1bde39f7-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:40:24,480 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:24,480 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:24,481 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:24,481 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:24,481 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:24,481 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:40:21Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:24Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:40:20Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:40:21Z', 'request-id': 'req_011CRo5aYALfkQBntMTdB37z', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd6dc1bde39f7-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:40:24,481 - anthropic._base_client - DEBUG - request_id: req_011CRo5aYALfkQBntMTdB37z
2025-08-04 13:40:24,482 - tools.synthesis_tools - INFO - Successfully synthesized summary for query 'Provide a comprehensive summary of the main points and content from both documents'
2025-08-04 13:40:24,482 - orchestrator_v2.execution_engine - INFO - Step 'step_5' completed successfully
2025-08-04 13:40:24,482 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 5, Failed: 0
2025-08-04 13:40:24,483 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-3a1e6afd-f9c2-49e1-b1e4-3fd1896075df', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what do these documents say"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 2 (discover_document_structure, confidence: 0.95):\n{\'status\': \'error\', \'message\': "Doc \'20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\' not found."}...\n\n## Analysis 3 (search_multiple_docs, confidence: 0.95):\n[]...\n\n## Analysis 4 (extract_key_phrases, confidence: 0.95):\n{\'status\': \'success\', \'top_words\': {\'step_3_output\': 1}, \'top_bigrams\': {}, \'top_trigrams\': {}, \'total_unique_words\': 1, \'total_unique_bigrams\': 0, \'total_unique_trigrams\': 0}...\n\n## Analysis 5 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'summary\', \'query\': \'Provide a comprehensive summary of the main points and content from both documents\', \'result\': \'I don\\\'t see the actual content of the documents you\\\'d like me to analyze - only the file names "riskandfinace.pdf" and "20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt" are provided. Without access to the content of these documents, I cannot provide a meaningful synthesis or comparison.\\n\\nTo help you get a comprehensive summary, please share the actual content or text from both documents. Once you do so, I can:\\n\\n1. Analyze and compare their main points\\n2. Identify key themes and patterns\\n3. Provide supporting evidence from both documents\\n4. Note any limitations or gaps in the information\\n5. Create a clear synthesis that addresses your query\\n\\nPlease feel free to share the document contents, and I\\\'ll be happy to provide a detailed analysis.\', \'documents_processed\': 2, \'content_length\': 777, \'proc...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:40:24,484 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:40:24,484 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:40:24,485 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:40:24,485 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:40:24,485 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:40:24,485 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:29,471 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:29 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:40:25Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:29Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:40:24Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:40:25Z'), (b'request-id', b'req_011CRo5aqcpcraefeFdhVcRC'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd6f59bd939f7-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:40:29,472 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:29,472 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:29,472 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:29,472 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:29,472 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:29,472 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:40:25Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:29Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:40:24Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:40:25Z', 'request-id': 'req_011CRo5aqcpcraefeFdhVcRC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd6f59bd939f7-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:40:29,472 - anthropic._base_client - DEBUG - request_id: req_011CRo5aqcpcraefeFdhVcRC
2025-08-04 13:40:29,473 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: a088efbe-72bc-4ce1-97e4-7bb561c1fd6e
2025-08-04 13:40:29,473 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:40:29,473 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:40:29,473 - __main__ - INFO - Added assistant response to memory - length: 1065
2025-08-04 13:40:29,473 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 18331ms, correlation_id: 2ff52feb-e8c3-4962-9729-73bd5b210917
INFO:     127.0.0.1:49216 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:49418 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:40:38,550 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what is risk, correlation_id: 1d6b9f8b-4685-493e-a3ff-f858ed23c589
2025-08-04 13:40:38,550 - __main__ - INFO - Loaded memory context - short_term: 8, summaries: 3
2025-08-04 13:40:38,550 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:40:38,550 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what is risk...
2025-08-04 13:40:38,550 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 9d09347b-69b6-4bb2-9555-2483255b11fe, Strategy: adaptive
2025-08-04 13:40:38,551 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:40:38,551 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what is risk...'
2025-08-04 13:40:38,551 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: document_analysis
2025-08-04 13:40:38,551 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:40:38,551 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DOCUMENT ANALYSIS DEBUG: active_documents=['riskandfinace.pdf'], doc_name=riskandfinace.pdf
2025-08-04 13:40:38,551 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created document_analysis plan with 2 steps
2025-08-04 13:40:38,551 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:40:38,551 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:40:38,551 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: doc_analysis_1754329238
2025-08-04 13:40:38,551 - orchestrator_v2.execution_engine - INFO - Executing step: search_document (search_uploaded_docs)
2025-08-04 13:40:38,551 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': 'riskandfinace.pdf', 'query': 'what is risk'}
2025-08-04 13:40:38,551 - orchestrator_v2.execution_engine - INFO - Step 'search_document' completed successfully
2025-08-04 13:40:38,551 - orchestrator_v2.execution_engine - INFO - Executing step: synthesize_analysis (synthesize_content)
2025-08-04 13:40:38,551 - tools.synthesis_tools - INFO - Synthesizing analysis for query: 'what is risk' from 1 documents
2025-08-04 13:40:38,551 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-83e51476-b999-4685-8bfd-a8a4b9022865', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a detailed analysis based on the following documents and query.\n\nQuery: what is risk\n\nDocuments:\n=== 1 ===\n## Page 1\n\nUnderstanding Finance and Risk\nWhat is Finance?\nFinance is the study and management of money, investments, and other Ô¨Ånancial instru-\nments. It encompasses activities such as budgeting, saving, investing, borrowing, and\nforecasting to ensure the eÔ¨Écient allocation of resources. Finance is broadly categorized\ninto three areas: personal Ô¨Ånance (managing individual or household Ô¨Ånances), corporate\nÔ¨Ånance (managing business Ô¨Ånances), and public Ô¨Ånance (managing government revenues\nand expenditures). The primary goal of Ô¨Ånance is to maximize value while balancing liq-\nuidity and proÔ¨Åtability.\nWhat is Risk?\nRisk refers to the uncertainty or potential for loss in Ô¨Ånancial decisions or investments.\nIt arises from factors such as market volatility, economic changes, or unforeseen events.\nIn Ô¨Ånance, risk is often measured by the likelihood and magnitude of deviations from\nexpected outcomes. Common types of Ô¨Ånancial risk include market risk (price Ô¨Çuctua-\ntions), credit risk (default on loans), liquidity risk (inability to convert assets to cash),\nand operational risk (failures in processes or systems).\nThe Relationship Between Finance and Risk\nFinance and risk are inherently linked, as Ô¨Ånancial decisions involve weighing potential\nreturns against uncertainties. EÔ¨Äective Ô¨Ånancial management requires assessing and mit-\nigating risks through strategies like diversiÔ¨Åcation, hedging, or insurance. Understanding\nrisk enables individuals and organizations to make informed decisions, optimize returns,\nand safeguard their Ô¨Ånancial stability.\nFor more information, explore resources at Investopedia or consult a Ô¨Ånancial advisor.\n1\n\nPlease provide:\n1. Detailed analysis addressing the query\n2. Key findings and insights\n3. Supporting evidence and examples\n4. Implications and conclusions\n5. Any recommendations or next steps\n\nAnalysis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:40:38,551 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:40:38,551 - httpcore.connection - DEBUG - close.started
2025-08-04 13:40:38,552 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:40:38,552 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:40:38,564 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a12b790>
2025-08-04 13:40:38,564 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:40:38,583 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a12b8a0>
2025-08-04 13:40:38,583 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:40:38,583 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:40:38,583 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:40:38,583 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:40:38,583 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:46,735 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:46 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:40:39Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:46Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:40:38Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:40:39Z'), (b'request-id', b'req_011CRo5bss38DngNDGDAQ4F5'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd74da95aab63-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:40:46,735 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:46,735 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:46,736 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:46,736 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:46,736 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:46,736 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:46 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:40:39Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:46Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:40:38Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:40:39Z', 'request-id': 'req_011CRo5bss38DngNDGDAQ4F5', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd74da95aab63-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:40:46,736 - anthropic._base_client - DEBUG - request_id: req_011CRo5bss38DngNDGDAQ4F5
2025-08-04 13:40:46,737 - tools.synthesis_tools - INFO - Successfully synthesized analysis for query 'what is risk'
2025-08-04 13:40:46,738 - orchestrator_v2.execution_engine - INFO - Step 'synthesize_analysis' completed successfully
2025-08-04 13:40:46,738 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:40:46,738 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-a5124c80-cb3e-45f8-b394-85c39c9df2c1', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what is risk"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[{\'page_content\': \'## Page 1\\n\\nUnderstanding Finance and Risk\\nWhat is Finance?\\nFinance is the study and management of money, investments, and other Ô¨Ånancial instru-\\nments. It encompasses activities such as budgeting, saving, investing, borrowing, and\\nforecasting to ensure the eÔ¨Écient allocation of resources. Finance is broadly categorized\\ninto three areas: personal Ô¨Ånance (managing individual or household Ô¨Ånances), corporate\\nÔ¨Ånance (managing business Ô¨Ånances), and public Ô¨Ånance (managing government revenues\\nand expenditures). The primary goal of Ô¨Ånance is to maximize value while balancing liq-\\nuidity and proÔ¨Åtability.\\nWhat is Risk?\\nRisk refers to the uncertainty or potential for loss in Ô¨Ånancial decisions or investments.\\nIt arises from factors such as market volatility, economic changes, or unforeseen events.\\nIn Ô¨Ånance, risk is often measured by the likelihood and magnitude of deviations from\\nexpected outcomes. Common types of Ô¨Ånancial risk include market risk (price Ô¨Çuct...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'analysis\', \'query\': \'what is risk\', \'result\': "I\'ll provide a comprehensive analysis of risk based on the provided document.\\n\\n1. Detailed Analysis:\\nRisk is defined as the uncertainty or potential for loss in financial decisions or investments. The document outlines several key aspects of risk:\\n- It\'s fundamentally about uncertainty in outcomes\\n- It can be measured through likelihood and magnitude of deviations\\n- It\'s directly connected to financial decision-making\\n- It arises from multiple sources (market, economic changes, unforeseen events)\\n\\n2. Key Findings and Insights:\\na) Types of Financial Risk:\\n- Market risk (related to price fluctuations)\\n- Credit risk (possibility of loan defaults)\\n- Liquidity risk (difficulty converting assets to cash)\\n- Operational risk (process/system failures)\\n\\nb) Risk-Finance Relationship:\\n- Risk and finance are intrinsically connected\\n- Financial decisions require balancing potential returns against r...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:40:46,739 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:40:46,739 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:40:46,740 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:40:46,740 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:40:46,740 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:40:46,741 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:40:51,698 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:40:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:40:47Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:40:52Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:40:46Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:40:47Z'), (b'request-id', b'req_011CRo5cUkkv3WyYjXnM3u9T'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fd780ad50ab63-YYZ')])
2025-08-04 13:40:51,698 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:40:51,699 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:40:51,699 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:40:51,699 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:40:51,699 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:40:51,699 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:40:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:40:47Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:40:52Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:40:46Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:40:47Z', 'request-id': 'req_011CRo5cUkkv3WyYjXnM3u9T', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fd780ad50ab63-YYZ'})
2025-08-04 13:40:51,699 - anthropic._base_client - DEBUG - request_id: req_011CRo5cUkkv3WyYjXnM3u9T
2025-08-04 13:40:51,700 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 9d09347b-69b6-4bb2-9555-2483255b11fe
2025-08-04 13:40:51,700 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:40:51,700 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:40:51,701 - __main__ - INFO - Added assistant response to memory - length: 1377
2025-08-04 13:40:51,701 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 13150ms, correlation_id: 1d6b9f8b-4685-493e-a3ff-f858ed23c589
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': 'riskandfinace.pdf', 'query': 'what is risk'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='riskandfinace.pdf'
üîç SEARCH DEBUG: doc_name='riskandfinace.pdf', in_store=True, store_keys=49
INFO:     127.0.0.1:49420 - "POST /chat HTTP/1.1" 200 OK
2025-08-04 13:42:32,366 - orchestrator_v2.state_management - INFO - Loaded persistent state from disk
2025-08-04 13:42:32,366 - orchestrator_v2.orchestrator_v2 - INFO - Orchestrator 2.0 LLM initialized: claude-3-5-sonnet-20241022
2025-08-04 13:42:32,366 - orchestrator_v2.planning_engine - INFO - Fixed Planning Engine initialized
2025-08-04 13:42:32,366 - orchestrator_v2.planning_engine_enhanced - INFO - Enhanced Planning Engine initialized with AI Finance and Risk Agent
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: upload_document (category: document)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: discover_document_structure (category: document)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: search_uploaded_docs (category: search)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: search_multiple_docs (category: search)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: get_all_documents (category: document)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: remove_document (category: document)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: synthesize_content (category: synthesis)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: search_knowledge_base (category: search)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: search_conversation_history (category: search)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: execute_python_code (category: computation)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: process_table_data (category: computation)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: calculate_statistics (category: computation)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: create_chart (category: visualization)
2025-08-04 13:42:32,366 - orchestrator_v2.tool_registry - INFO - Registered tool: create_wordcloud (category: visualization)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: create_statistical_plot (category: visualization)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: create_comparison_chart (category: visualization)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: analyze_text_metrics (category: analysis)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: extract_key_phrases (category: analysis)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: analyze_sentiment (category: analysis)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: extract_entities (category: analysis)
2025-08-04 13:42:32,367 - orchestrator_v2.orchestrator_v2 - INFO - Registered 20 tools across 6 categories
2025-08-04 13:42:32,367 - orchestrator_v2.orchestrator_v2 - INFO - Orchestrator 2.0 initialized successfully
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: search_uploaded_docs (category: search)
2025-08-04 13:42:32,367 - orchestrator_v2.tool_registry - INFO - Registered tool: search_multiple_docs (category: search)
2025-08-04 13:42:32,367 - orchestrator_v2_verified - INFO - üîí Verified document tools registered successfully
2025-08-04 13:42:32,367 - orchestrator_v2_verified - INFO - üîí Orchestrator V2 initialized with runtime verification
üîí REGISTERING VERIFIED TOOLS...
‚úÖ VERIFIED TOOLS REGISTERED
üîí VERIFIED ORCHESTRATOR: Created new verified instance
üîç VERIFICATION: Checking document tools integrity...
üîç IDENTITY VERIFICATION for 'search_uploaded_docs':
  Module: tools.document_tools ‚úÖ
  Name: search_uploaded_docs ‚úÖ
  Async: True ‚úÖ
  Overall: ‚úÖ VERIFIED
INFO:     127.0.0.1:50293 - "POST /verification/force-verification-mode HTTP/1.1" 200 OK
INFO:     127.0.0.1:50355 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:42:40,803 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what is risk, correlation_id: e3fc7fe9-640b-499b-824b-c8b9505ac4b7
2025-08-04 13:42:40,804 - __main__ - INFO - Loaded memory context - short_term: 10, summaries: 3
2025-08-04 13:42:40,806 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:42:40,806 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what is risk...
2025-08-04 13:42:40,806 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 38e3b3dc-45fd-436a-a5b6-1e43ef5d6cca, Strategy: adaptive
2025-08-04 13:42:40,806 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:42:40,806 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what is risk...'
2025-08-04 13:42:40,806 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: document_analysis
2025-08-04 13:42:40,806 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:42:40,806 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DOCUMENT ANALYSIS DEBUG: active_documents=['riskandfinace.pdf'], doc_name=riskandfinace.pdf
2025-08-04 13:42:40,806 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created document_analysis plan with 2 steps
2025-08-04 13:42:40,806 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:42:40,806 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:42:40,806 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: doc_analysis_1754329360
2025-08-04 13:42:40,806 - orchestrator_v2.execution_engine - INFO - Executing step: search_document (search_uploaded_docs)
2025-08-04 13:42:40,806 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': 'riskandfinace.pdf', 'query': 'what is risk'}
2025-08-04 13:42:40,806 - orchestrator_v2.execution_engine - INFO - Step 'search_document' completed successfully
2025-08-04 13:42:40,806 - orchestrator_v2.execution_engine - INFO - Executing step: synthesize_analysis (synthesize_content)
2025-08-04 13:42:40,806 - tools.synthesis_tools - INFO - Synthesizing analysis for query: 'what is risk' from 1 documents
2025-08-04 13:42:40,807 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-1c162d2f-08a2-4c78-932c-1e83200028fa', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a detailed analysis based on the following documents and query.\n\nQuery: what is risk\n\nDocuments:\n=== 1 ===\n## Page 1\n\nUnderstanding Finance and Risk\nWhat is Finance?\nFinance is the study and management of money, investments, and other Ô¨Ånancial instru-\nments. It encompasses activities such as budgeting, saving, investing, borrowing, and\nforecasting to ensure the eÔ¨Écient allocation of resources. Finance is broadly categorized\ninto three areas: personal Ô¨Ånance (managing individual or household Ô¨Ånances), corporate\nÔ¨Ånance (managing business Ô¨Ånances), and public Ô¨Ånance (managing government revenues\nand expenditures). The primary goal of Ô¨Ånance is to maximize value while balancing liq-\nuidity and proÔ¨Åtability.\nWhat is Risk?\nRisk refers to the uncertainty or potential for loss in Ô¨Ånancial decisions or investments.\nIt arises from factors such as market volatility, economic changes, or unforeseen events.\nIn Ô¨Ånance, risk is often measured by the likelihood and magnitude of deviations from\nexpected outcomes. Common types of Ô¨Ånancial risk include market risk (price Ô¨Çuctua-\ntions), credit risk (default on loans), liquidity risk (inability to convert assets to cash),\nand operational risk (failures in processes or systems).\nThe Relationship Between Finance and Risk\nFinance and risk are inherently linked, as Ô¨Ånancial decisions involve weighing potential\nreturns against uncertainties. EÔ¨Äective Ô¨Ånancial management requires assessing and mit-\nigating risks through strategies like diversiÔ¨Åcation, hedging, or insurance. Understanding\nrisk enables individuals and organizations to make informed decisions, optimize returns,\nand safeguard their Ô¨Ånancial stability.\nFor more information, explore resources at Investopedia or consult a Ô¨Ånancial advisor.\n1\n\nPlease provide:\n1. Detailed analysis addressing the query\n2. Key findings and insights\n3. Supporting evidence and examples\n4. Implications and conclusions\n5. Any recommendations or next steps\n\nAnalysis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:42:40,807 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:42:40,807 - httpcore.connection - DEBUG - close.started
2025-08-04 13:42:40,807 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:42:40,807 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:42:40,821 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a18a750>
2025-08-04 13:42:40,821 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:42:40,839 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a18a950>
2025-08-04 13:42:40,839 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:42:40,839 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:42:40,839 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:42:40,839 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:42:40,839 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:42:48,795 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:42:48 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:42:41Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:42:48Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:42:41Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:42:41Z'), (b'request-id', b'req_011CRo5ktbScBbB7KFU4gjMg'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fda49ca4bac63-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:42:48,796 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:42:48,796 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:42:48,796 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:42:48,797 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:42:48,797 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:42:48,797 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:42:48 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:42:41Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:42:48Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:42:41Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:42:41Z', 'request-id': 'req_011CRo5ktbScBbB7KFU4gjMg', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fda49ca4bac63-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:42:48,797 - anthropic._base_client - DEBUG - request_id: req_011CRo5ktbScBbB7KFU4gjMg
2025-08-04 13:42:48,799 - tools.synthesis_tools - INFO - Successfully synthesized analysis for query 'what is risk'
2025-08-04 13:42:48,799 - orchestrator_v2.execution_engine - INFO - Step 'synthesize_analysis' completed successfully
2025-08-04 13:42:48,799 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:42:48,800 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-d258f73c-902f-4de5-a470-51676b75fadf', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what is risk"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[{\'page_content\': \'## Page 1\\n\\nUnderstanding Finance and Risk\\nWhat is Finance?\\nFinance is the study and management of money, investments, and other Ô¨Ånancial instru-\\nments. It encompasses activities such as budgeting, saving, investing, borrowing, and\\nforecasting to ensure the eÔ¨Écient allocation of resources. Finance is broadly categorized\\ninto three areas: personal Ô¨Ånance (managing individual or household Ô¨Ånances), corporate\\nÔ¨Ånance (managing business Ô¨Ånances), and public Ô¨Ånance (managing government revenues\\nand expenditures). The primary goal of Ô¨Ånance is to maximize value while balancing liq-\\nuidity and proÔ¨Åtability.\\nWhat is Risk?\\nRisk refers to the uncertainty or potential for loss in Ô¨Ånancial decisions or investments.\\nIt arises from factors such as market volatility, economic changes, or unforeseen events.\\nIn Ô¨Ånance, risk is often measured by the likelihood and magnitude of deviations from\\nexpected outcomes. Common types of Ô¨Ånancial risk include market risk (price Ô¨Çuct...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'analysis\', \'query\': \'what is risk\', \'result\': "I\'ll provide a comprehensive analysis of risk based on the provided document.\\n\\n1. Detailed Analysis:\\nRisk is defined as the uncertainty or potential for loss in financial decisions or investments. The document outlines several key aspects of risk:\\n- It\'s fundamentally about uncertainty in outcomes\\n- It can be measured through likelihood and magnitude of deviations\\n- It\'s directly connected to financial decision-making\\n- It arises from multiple sources (market, economic changes, unforeseen events)\\n\\n2. Key Findings and Insights:\\na) Types of Financial Risk:\\n- Market risk (related to price fluctuations)\\n- Credit risk (possibility of loan defaults)\\n- Liquidity risk (difficulty converting assets to cash)\\n- Operational risk (process/system failures)\\n\\nb) Risk-Finance Relationship:\\n- Risk and finance are intrinsically connected\\n- Financial decisions require balancing potential returns against r...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:42:48,800 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:42:48,800 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:42:48,801 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:42:48,801 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:42:48,801 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:42:48,801 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:42:53,813 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:42:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:42:49Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:42:54Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:42:48Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:42:49Z'), (b'request-id', b'req_011CRo5mUc5nP3UbK6YL99tB'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fda7b8f96ac63-YYZ')])
2025-08-04 13:42:53,814 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:42:53,814 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:42:53,815 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:42:53,815 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:42:53,815 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:42:53,815 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:42:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:42:49Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:42:54Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:42:48Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:42:49Z', 'request-id': 'req_011CRo5mUc5nP3UbK6YL99tB', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fda7b8f96ac63-YYZ'})
2025-08-04 13:42:53,815 - anthropic._base_client - DEBUG - request_id: req_011CRo5mUc5nP3UbK6YL99tB
2025-08-04 13:42:53,817 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 38e3b3dc-45fd-436a-a5b6-1e43ef5d6cca
2025-08-04 13:42:53,817 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:42:53,817 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:42:53,818 - __main__ - INFO - Added assistant response to memory - length: 1377
2025-08-04 13:42:53,818 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 13013ms, correlation_id: e3fc7fe9-640b-499b-824b-c8b9505ac4b7
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': 'riskandfinace.pdf', 'query': 'what is risk'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='riskandfinace.pdf'
üîç SEARCH DEBUG: doc_name='riskandfinace.pdf', in_store=True, store_keys=49
INFO:     127.0.0.1:50357 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:50557 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:43:03,735 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: compare and contrast the information in the 2 chapters as a cro assistant at a big bank, correlation_id: 32578266-38c8-4fb3-92e3-c33b081f868d
2025-08-04 13:43:03,735 - __main__ - INFO - Loaded memory context - short_term: 7, summaries: 3
2025-08-04 13:43:03,735 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:43:03,735 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: compare and contrast the information in the 2 chapters as a cro assistant at a big bank...
2025-08-04 13:43:03,735 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 37953bfc-a0fb-4404-9428-d18d2e4258f6, Strategy: adaptive
2025-08-04 13:43:03,735 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:43:03,735 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'compare and contrast the information in the 2 chapters as a cro assistant at a big bank...'
2025-08-04 13:43:03,735 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: multi_doc_comparison
2025-08-04 13:43:03,735 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:43:03,735 - orchestrator_v2.planning_engine_enhanced - ERROR - Enhanced planning error: 'financial_comparison'
2025-08-04 13:43:03,735 - orchestrator_v2.planning_engine - INFO - Creating execution plan for query: 'compare and contrast the information in the 2 chapters as a cro assistant at a big bank...' using adaptive strategy
2025-08-04 13:43:03,736 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-fbd8d136-6fac-4d95-80fb-f6391b7d2516', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Create an execution plan for the user query using available tools.\n\nUser Query: compare and contrast the information in the 2 chapters as a cro assistant at a big bank\nSession ID: terminal-test-session\nActive Documents: [\'20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\', \'20250801_225612_eb32239c-edbd-4efa-82c5-1d7dea2ab6ac_car24_chpt7.pdf\']\nStrategy: adaptive\n\nAVAILABLE TOOLS WITH EXACT PARAMETER NAMES:\n- create_statistical_plot: Create statistical plots for data analysis\n  Parameters: {"data": List (REQUIRED), "plot_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- analyze_text_metrics: Analyze comprehensive text metrics and readability\n  Parameters: {"text": str (REQUIRED)}\n- discover_document_structure: Analyze document structure and extract metadata\n  Parameters: {"doc_name": str (REQUIRED)}\n- extract_key_phrases: Extract key phrases and important terms\n  Parameters: {"text": str (REQUIRED), "top_n": int (optional), "min_length": int (optional)}\n- upload_document: Process and store a document for analysis\n  Parameters: {"file_path": str (REQUIRED), "session_id": str (optional), "additional_metadata": dict (optional), "original_filename": str (optional)}\n- calculate_statistics: Calculate statistical metrics for numerical data\n  Parameters: {"data": List (REQUIRED), "metrics": List (optional)}\n- create_wordcloud: Generate word cloud visualizations\n  Parameters: {"text": str (REQUIRED), "max_words": int (optional), "save_path": Optional (optional)}\n- get_all_documents: Get list of all uploaded documents across sessions\n  Parameters: {}\n- analyze_sentiment: Perform sentiment analysis on text content\n  Parameters: {"text": str (REQUIRED)}\n- search_knowledge_base: Search the general knowledge base\n  Parameters: {"query": str (REQUIRED)}\n- create_comparison_chart: Create comparison charts with multiple datasets\n  Parameters: {"datasets": Dict (REQUIRED), "chart_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- process_table_data: Process and analyze tabular data\n  Parameters: {"table_data": List (REQUIRED), "operation": str (REQUIRED)}\n- execute_python_code: Execute Python code for data analysis and calculations\n  Parameters: {"code": str (REQUIRED), "context": Dict (optional)}\n- search_conversation_history: Search previous conversation history\n  Parameters: {"query": str (REQUIRED)}\n- search_uploaded_docs: Search within uploaded documents with filtering options\n  Parameters: {"doc_name": str (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- search_multiple_docs: Search across multiple documents simultaneously\n  Parameters: {"doc_names": List (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- remove_document: Remove a specific document from storage\n  Parameters: {"doc_name": str (REQUIRED)}\n- synthesize_content: Generate cohesive synthesis from multiple content chunks\n  Parameters: {"documents": List (REQUIRED), "query": str (REQUIRED), "synthesis_type": str (optional)}\n- extract_entities: Extract named entities from text\n  Parameters: {"text": str (REQUIRED)}\n- create_chart: Create various types of charts and graphs\n  Parameters: {"data": Dict (REQUIRED), "chart_type": str (REQUIRED), "title": str (optional), "save_path": Optional (optional)}\n\nCRITICAL PARAMETER RULES:\n- ALWAYS use exact parameter names shown above\n- For search_uploaded_docs: use "doc_name" (NOT "doc_id")\n- For synthesize_content: use "documents" and "query" (REQUIRED)\n- For extract_key_phrases: use "text" (NOT "text_input" or "input_text")\n- For create_wordcloud: use "text" (NOT "text_input")\n- For discover_document_structure: use "doc_name" (NOT "doc_id")\n\nCONDITION GUIDELINES:\n- Use "always" for steps that should always execute\n- Use "on_success" for steps that depend on previous step success\n- Use "on_failure" for error handling steps\n\nReturn a JSON plan with this structure:\n{\n    "strategy": "adaptive",\n    "steps": [\n        {\n            "id": "step_1",\n            "tool": "tool_name",\n            "parameters": {"exact_param_name": "value"},\n            "dependencies": [],\n            "condition": "always",\n            "description": "What this step does"\n        }\n    ]\n}\n\nCreate a plan that addresses the user query effectively using the available tools with EXACT parameter names.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:43:03,736 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:43:03,736 - httpcore.connection - DEBUG - close.started
2025-08-04 13:43:03,736 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:43:03,736 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:43:03,751 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a1f8c80>
2025-08-04 13:43:03,751 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:43:03,773 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a1f9310>
2025-08-04 13:43:03,773 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:43:03,773 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:43:03,773 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:43:03,773 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:43:03,773 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:43:14,862 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:43:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:43:04Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:43:15Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:43:03Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:43:04Z'), (b'request-id', b'req_011CRo5nafz6KzdCbxCcRke4'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdad92827ac24-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:43:14,862 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:43:14,863 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:43:14,863 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:43:14,863 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:43:14,863 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:43:14,863 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:43:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:43:04Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:43:15Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:43:03Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:43:04Z', 'request-id': 'req_011CRo5nafz6KzdCbxCcRke4', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdad92827ac24-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:43:14,864 - anthropic._base_client - DEBUG - request_id: req_011CRo5nafz6KzdCbxCcRke4
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - INFO - Created execution plan with 5 steps
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - DEBUG - Step step_1: search_multiple_docs with condition ConditionType.ALWAYS
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - DEBUG - Step step_2: extract_key_phrases with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - DEBUG - Step step_3: analyze_text_metrics with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - DEBUG - Step step_4: synthesize_content with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:14,865 - orchestrator_v2.planning_engine - DEBUG - Step step_5: create_comparison_chart with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:14,865 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 5 steps
2025-08-04 13:43:14,865 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:43:14,865 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: plan_1754329394
2025-08-04 13:43:14,865 - orchestrator_v2.execution_engine - INFO - Executing step: step_1 (search_multiple_docs)
2025-08-04 13:43:14,865 - orchestrator_v2.execution_engine - INFO - Step 'step_1' completed successfully
2025-08-04 13:43:14,865 - orchestrator_v2.execution_engine - INFO - Executing step: step_2 (extract_key_phrases)
2025-08-04 13:43:14,866 - orchestrator_v2.execution_engine - INFO - Executing step: step_3 (analyze_text_metrics)
2025-08-04 13:43:15,213 - orchestrator_v2.execution_engine - INFO - Step 'step_2' completed successfully
2025-08-04 13:43:15,213 - orchestrator_v2.execution_engine - INFO - Step 'step_3' completed successfully
2025-08-04 13:43:15,213 - orchestrator_v2.execution_engine - INFO - Executing step: step_4 (synthesize_content)
2025-08-04 13:43:15,213 - tools.synthesis_tools - INFO - Synthesizing comparative_analysis for query: 'compare and contrast the main themes, requirements, and key points between the two chapters from a CRO perspective' from 2 documents
2025-08-04 13:43:15,213 - orchestrator_v2.execution_engine - INFO - Executing step: step_5 (create_comparison_chart)
2025-08-04 13:43:15,236 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 5.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,363 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 5.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,364 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,365 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,366 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,367 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéÊòéÊúù ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,368 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„Éé‰∏∏„Ç≥„Çô ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,369 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,370 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to Arial ('/System/Library/Fonts/Supplemental/Arial.ttf') with score of 0.050000.
2025-08-04 13:43:15,384 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=14.0.
2025-08-04 13:43:15,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,384 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 5.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 5.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.525
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,385 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.535
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,386 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.535
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.43475
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.535
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,387 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.05
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.43475
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.33499999999999996
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.715
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,388 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéÊòéÊúù ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.4775
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.145
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,389 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.71025
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.25
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.4775
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,390 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„Éé‰∏∏„Ç≥„Çô ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/„Éí„É©„Ç≠„Çô„ÉéËßí„Ç≥„Çô„Ç∑„ÉÉ„ÇØ W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-04 13:43:15,391 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=14.0 to Arial ('/System/Library/Fonts/Supplemental/Arial Bold.ttf') with score of 0.050000.
2025-08-04 13:43:15,464 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-dadca5d0-2943-4fae-a035-d45aa9566bf4', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please synthesize the following documents to address the query.\n\nQuery: compare and contrast the main themes, requirements, and key points between the two chapters from a CRO perspective\nSynthesis Type: comparative_analysis\n\nDocuments:\n\n\nYou are comparing 2 separate documents:\n1. 1\n2. 2\n\n=== 1 ===\n20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\n=== 2 ===\n20250801_225612_eb32239c-edbd-4efa-82c5-1d7dea2ab6ac_car24_chpt7.pdf\n\nPlease provide a comprehensive response addressing the query based on the document content.\n\nResponse:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:43:15,465 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:43:15,465 - orchestrator_v2.execution_engine - INFO - Step 'step_5' completed successfully
2025-08-04 13:43:15,465 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:43:15,465 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:43:15,465 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:43:15,465 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:43:15,465 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:43:19,720 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:43:19 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:43:16Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:43:20Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:43:15Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:43:16Z'), (b'request-id', b'req_011CRo5oSdpPXekyzBDz1qhq'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdb223fe6ac24-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:43:19,721 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:43:19,721 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:43:19,722 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:43:19,722 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:43:19,722 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:43:19,722 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:43:19 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:43:16Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:43:20Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:43:15Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:43:16Z', 'request-id': 'req_011CRo5oSdpPXekyzBDz1qhq', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdb223fe6ac24-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:43:19,722 - anthropic._base_client - DEBUG - request_id: req_011CRo5oSdpPXekyzBDz1qhq
2025-08-04 13:43:19,723 - tools.synthesis_tools - INFO - Successfully synthesized comparative_analysis for query 'compare and contrast the main themes, requirements, and key points between the two chapters from a CRO perspective'
INFO:     127.0.0.1:50845 - "GET /health HTTP/1.1" 200 OK
INFO:     127.0.0.1:50897 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:43:47,415 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what do these documents contain, correlation_id: c89bde1e-6e84-450c-96fd-fb6bb5263957
2025-08-04 13:43:47,415 - __main__ - INFO - Loaded memory context - short_term: 8, summaries: 3
2025-08-04 13:43:47,416 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:43:47,416 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what do these documents contain...
2025-08-04 13:43:47,416 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: c0fe60aa-b579-4262-a754-25157e9b03b3, Strategy: adaptive
2025-08-04 13:43:47,416 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:43:47,416 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what do these documents contain...'
2025-08-04 13:43:47,416 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: multi_doc_comparison
2025-08-04 13:43:47,416 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:43:47,416 - orchestrator_v2.planning_engine_enhanced - ERROR - Enhanced planning error: 'financial_comparison'
2025-08-04 13:43:47,416 - orchestrator_v2.planning_engine - INFO - Creating execution plan for query: 'what do these documents contain...' using adaptive strategy
2025-08-04 13:43:47,417 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-3e536037-a08c-4e0c-9b17-5175380b4324', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Create an execution plan for the user query using available tools.\n\nUser Query: what do these documents contain\nSession ID: terminal-test-session\nActive Documents: [\'riskandfinace.pdf\', \'20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\']\nStrategy: adaptive\n\nAVAILABLE TOOLS WITH EXACT PARAMETER NAMES:\n- create_statistical_plot: Create statistical plots for data analysis\n  Parameters: {"data": List (REQUIRED), "plot_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- analyze_text_metrics: Analyze comprehensive text metrics and readability\n  Parameters: {"text": str (REQUIRED)}\n- discover_document_structure: Analyze document structure and extract metadata\n  Parameters: {"doc_name": str (REQUIRED)}\n- extract_key_phrases: Extract key phrases and important terms\n  Parameters: {"text": str (REQUIRED), "top_n": int (optional), "min_length": int (optional)}\n- upload_document: Process and store a document for analysis\n  Parameters: {"file_path": str (REQUIRED), "session_id": str (optional), "additional_metadata": dict (optional), "original_filename": str (optional)}\n- calculate_statistics: Calculate statistical metrics for numerical data\n  Parameters: {"data": List (REQUIRED), "metrics": List (optional)}\n- create_wordcloud: Generate word cloud visualizations\n  Parameters: {"text": str (REQUIRED), "max_words": int (optional), "save_path": Optional (optional)}\n- get_all_documents: Get list of all uploaded documents across sessions\n  Parameters: {}\n- analyze_sentiment: Perform sentiment analysis on text content\n  Parameters: {"text": str (REQUIRED)}\n- search_knowledge_base: Search the general knowledge base\n  Parameters: {"query": str (REQUIRED)}\n- create_comparison_chart: Create comparison charts with multiple datasets\n  Parameters: {"datasets": Dict (REQUIRED), "chart_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- process_table_data: Process and analyze tabular data\n  Parameters: {"table_data": List (REQUIRED), "operation": str (REQUIRED)}\n- execute_python_code: Execute Python code for data analysis and calculations\n  Parameters: {"code": str (REQUIRED), "context": Dict (optional)}\n- search_conversation_history: Search previous conversation history\n  Parameters: {"query": str (REQUIRED)}\n- search_uploaded_docs: Search within uploaded documents with filtering options\n  Parameters: {"doc_name": str (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- search_multiple_docs: Search across multiple documents simultaneously\n  Parameters: {"doc_names": List (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- remove_document: Remove a specific document from storage\n  Parameters: {"doc_name": str (REQUIRED)}\n- synthesize_content: Generate cohesive synthesis from multiple content chunks\n  Parameters: {"documents": List (REQUIRED), "query": str (REQUIRED), "synthesis_type": str (optional)}\n- extract_entities: Extract named entities from text\n  Parameters: {"text": str (REQUIRED)}\n- create_chart: Create various types of charts and graphs\n  Parameters: {"data": Dict (REQUIRED), "chart_type": str (REQUIRED), "title": str (optional), "save_path": Optional (optional)}\n\nCRITICAL PARAMETER RULES:\n- ALWAYS use exact parameter names shown above\n- For search_uploaded_docs: use "doc_name" (NOT "doc_id")\n- For synthesize_content: use "documents" and "query" (REQUIRED)\n- For extract_key_phrases: use "text" (NOT "text_input" or "input_text")\n- For create_wordcloud: use "text" (NOT "text_input")\n- For discover_document_structure: use "doc_name" (NOT "doc_id")\n\nCONDITION GUIDELINES:\n- Use "always" for steps that should always execute\n- Use "on_success" for steps that depend on previous step success\n- Use "on_failure" for error handling steps\n\nReturn a JSON plan with this structure:\n{\n    "strategy": "adaptive",\n    "steps": [\n        {\n            "id": "step_1",\n            "tool": "tool_name",\n            "parameters": {"exact_param_name": "value"},\n            "dependencies": [],\n            "condition": "always",\n            "description": "What this step does"\n        }\n    ]\n}\n\nCreate a plan that addresses the user query effectively using the available tools with EXACT parameter names.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:43:47,417 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:43:47,417 - httpcore.connection - DEBUG - close.started
2025-08-04 13:43:47,417 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:43:47,417 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:43:47,434 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8d8bb0>
2025-08-04 13:43:47,434 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:43:47,452 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8d8d70>
2025-08-04 13:43:47,452 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:43:47,452 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:43:47,452 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:43:47,453 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:43:47,453 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:43:56,288 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:43:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:43:48Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:43:56Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:43:47Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:43:48Z'), (b'request-id', b'req_011CRo5qoUzpvd9LwNYMYBWv'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdbea28a2ea84-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:43:56,289 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:43:56,289 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:43:56,290 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:43:56,290 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:43:56,290 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:43:56,290 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:43:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:43:48Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:43:56Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:43:47Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:43:48Z', 'request-id': 'req_011CRo5qoUzpvd9LwNYMYBWv', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdbea28a2ea84-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:43:56,290 - anthropic._base_client - DEBUG - request_id: req_011CRo5qoUzpvd9LwNYMYBWv
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - INFO - Created execution plan with 5 steps
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - DEBUG - Step step_1: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - DEBUG - Step step_2: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - DEBUG - Step step_3: search_multiple_docs with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - DEBUG - Step step_4: extract_key_phrases with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:56,292 - orchestrator_v2.planning_engine - DEBUG - Step step_5: synthesize_content with condition ConditionType.ON_SUCCESS
2025-08-04 13:43:56,292 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 5 steps
2025-08-04 13:43:56,292 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:43:56,292 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: plan_1754329436
2025-08-04 13:43:56,292 - orchestrator_v2.execution_engine - INFO - Executing step: step_1 (discover_document_structure)
2025-08-04 13:43:56,292 - orchestrator_v2.execution_engine - INFO - Executing step: step_2 (discover_document_structure)
2025-08-04 13:43:56,292 - orchestrator_v2.execution_engine - INFO - Step 'step_1' completed successfully
2025-08-04 13:43:56,292 - orchestrator_v2.execution_engine - INFO - Step 'step_2' completed successfully
2025-08-04 13:43:56,293 - orchestrator_v2.execution_engine - INFO - Executing step: step_3 (search_multiple_docs)
2025-08-04 13:43:56,293 - orchestrator_v2.execution_engine - INFO - Step 'step_3' completed successfully
2025-08-04 13:43:56,293 - orchestrator_v2.execution_engine - INFO - Executing step: step_4 (extract_key_phrases)
2025-08-04 13:43:56,293 - orchestrator_v2.execution_engine - INFO - Step 'step_4' completed successfully
2025-08-04 13:43:56,293 - orchestrator_v2.execution_engine - INFO - Executing step: step_5 (synthesize_content)
2025-08-04 13:43:56,293 - tools.synthesis_tools - INFO - Synthesizing summary for query: 'What are the main topics and content of these documents?' from 2 documents
2025-08-04 13:43:56,294 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-91f70bb7-f420-4d09-ab4d-c1f6b7fbd3c5', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a comprehensive summary based on the following documents and query.\n\nQuery: What are the main topics and content of these documents?\n\nDocuments:\n\n\nYou are comparing 2 separate documents:\n1. 1\n2. 2\n\n=== 1 ===\nriskandfinace.pdf\n=== 2 ===\n20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\n\nPlease synthesize the information to answer the query with:\n1. A clear, direct answer to the query\n2. Supporting evidence from the documents\n3. Key insights and patterns\n4. Any limitations or gaps in the information\n\nSynthesis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:43:56,295 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:43:56,295 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:43:56,295 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:43:56,295 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:43:56,296 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:43:56,296 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:00,069 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:00 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:43:56Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:00Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:43:56Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:43:56Z'), (b'request-id', b'req_011CRo5rTBtVUkLsVo6WAdhu'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdc216a50ea84-YYZ')])
2025-08-04 13:44:00,069 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:00,069 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:00,069 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:00,069 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:00,070 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:00,070 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:00 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:43:56Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:00Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:43:56Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:43:56Z', 'request-id': 'req_011CRo5rTBtVUkLsVo6WAdhu', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdc216a50ea84-YYZ'})
2025-08-04 13:44:00,070 - anthropic._base_client - DEBUG - request_id: req_011CRo5rTBtVUkLsVo6WAdhu
2025-08-04 13:44:00,071 - tools.synthesis_tools - INFO - Successfully synthesized summary for query 'What are the main topics and content of these documents?'
2025-08-04 13:44:00,071 - orchestrator_v2.execution_engine - INFO - Step 'step_5' completed successfully
2025-08-04 13:44:00,071 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 5, Failed: 0
2025-08-04 13:44:00,072 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-53b7cabf-1cc8-4790-bf5c-f7a0c32aa53d', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what do these documents contain"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 2 (discover_document_structure, confidence: 0.95):\n{\'status\': \'error\', \'message\': "Doc \'20250801_224731_070aafb2-d92e-4598-8725-93b8e55a3583_car24_chpt1_0_simple.txt\' not found."}...\n\n## Analysis 3 (search_multiple_docs, confidence: 0.95):\n[{\'page_content\': \'## Page 1\\n\\nUnderstanding Finance and Risk\\nWhat is Finance?\\nFinance is the study and management of money, investments, and other Ô¨Ånancial instru-\\nments. It encompasses activities such as budgeting, saving, investing, borrowing, and\\nforecasting to ensure the eÔ¨Écient allocation of resources. Finance is broadly categorized\\ninto three areas: personal Ô¨Ånance (managing individual or household Ô¨Ånances), corporate\\nÔ¨Ånance (managing business Ô¨Ånances), and public Ô¨Ånance (managing government revenues\\nand expenditures). The primary goal of Ô¨Ånance is to maximize value while balancing liq-\\nuidity and proÔ¨Åtability.\\nWhat is Risk?\\nRisk refers to the uncertainty or potential for loss in Ô¨Ånancial decisions or investments.\\nIt arises from factors such as market volatility, economic changes, or unforeseen events.\\nIn Ô¨Ånance, risk is often measured by the likelihood and magnitude of deviations from\\nexpected outcomes. Common types of Ô¨Ånancial risk include market risk (price Ô¨Çuct...\n\n## Analysis 4 (extract_key_phrases, confidence: 0.95):\n{\'status\': \'success\', \'top_words\': {\'step_3_output\': 1}, \'top_bigrams\': {}, \'top_trigrams\': {}, \'total_unique_words\': 1, \'total_unique_bigrams\': 0, \'total_unique_trigrams\': 0}...\n\n## Analysis 5 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'summary\', \'query\': \'What are the main topics and content of these documents?\', \'result\': \'I apologize, but I don\\\'t see any actual content from the documents you mentioned - I only see the file names "riskandfinace.pdf" and a text file with a long identifier. Without access to the actual content of these documents, I cannot provide a meaningful synthesis or answer the query about their main topics and content.\\n\\nTo provide a comprehensive summary as requested, I would need:\\n- The actual text/content from both documents\\n- Specific details about what each document contains\\n- Substantive information to analyze and compare\\n\\nIf you could share the actual content of these documents, I would be happy to:\\n1. Analyze their main topics\\n2. Identify key themes and patterns\\n3. Provide supporting evidence\\n4. Note any limitations or gaps\\n5. Synthesize the information to answer your query\\n\\nPlease feel free to share the actual content of these documents...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:00,072 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:00,072 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:00,072 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:00,073 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:00,073 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:00,073 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:05,596 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:05 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:00Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:05Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:00Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:00Z'), (b'request-id', b'req_011CRo5rjJWJUyyqLWzahjjW'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdc38f80fea84-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:05,597 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:05,598 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:05,598 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:05,598 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:05,598 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:05,599 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:05 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:00Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:05Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:00Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:00Z', 'request-id': 'req_011CRo5rjJWJUyyqLWzahjjW', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdc38f80fea84-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:05,599 - anthropic._base_client - DEBUG - request_id: req_011CRo5rjJWJUyyqLWzahjjW
2025-08-04 13:44:05,600 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: c0fe60aa-b579-4262-a754-25157e9b03b3
2025-08-04 13:44:05,600 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:44:05,600 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:44:05,602 - __main__ - INFO - Added assistant response to memory - length: 1270
2025-08-04 13:44:05,602 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 18185ms, correlation_id: c89bde1e-6e84-450c-96fd-fb6bb5263957
INFO:     127.0.0.1:50899 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:51087 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:44:14,335 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: explain the data and extract key insights, correlation_id: a320aac0-ae67-4793-816b-73f18560f6c7
2025-08-04 13:44:14,336 - __main__ - INFO - Loaded memory context - short_term: 10, summaries: 3
2025-08-04 13:44:14,338 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:44:14,338 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: explain the data and extract key insights...
2025-08-04 13:44:14,338 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 401a030d-0bf9-4c53-8038-779563d23465, Strategy: adaptive
2025-08-04 13:44:14,338 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:44:14,338 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'explain the data and extract key insights...'
2025-08-04 13:44:14,338 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: data_analysis
2025-08-04 13:44:14,338 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:44:14,338 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DATA ANALYSIS DEBUG: active_documents=['20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'], doc_name=20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv
2025-08-04 13:44:14,338 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created data_analysis plan with 2 steps
2025-08-04 13:44:14,338 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:44:14,338 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: data_analysis_1754329454
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Executing step: search_table_data (search_uploaded_docs)
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'explain the data and extract key insights'}
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Step 'search_table_data' completed successfully
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Executing step: table_summary (synthesize_content)
2025-08-04 13:44:14,338 - tools.synthesis_tools - INFO - Synthesizing data_summary for query: 'explain the data and extract key insights' from 0 documents
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Step 'table_summary' completed successfully
2025-08-04 13:44:14,338 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:44:14,339 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-7c46a2cc-fb8c-4672-8659-0857fa6e7b4a', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "explain the data and extract key insights"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[]...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'error_type\': \'no_documents_provided\', \'success\': False, \'message\': \'No documents provided for synthesis\', \'suggested_action\': \'provide_document_content_or_search_results\', \'retryable\': False, \'replanning_hints\': {\'synthesis_failed\': True, \'reason\': \'No documents provided for synthesis\'}}...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:14,339 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:14,339 - httpcore.connection - DEBUG - close.started
2025-08-04 13:44:14,339 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:44:14,339 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:44:14,355 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a1da820>
2025-08-04 13:44:14,355 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:44:14,375 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e86b950>
2025-08-04 13:44:14,375 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:14,375 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:14,375 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:14,375 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:14,375 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:18,500 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:15Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:18Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:14Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:15Z'), (b'request-id', b'req_011CRo5snV2hkz4KJFutNoG1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdc926e06aa9d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:18,501 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:18,502 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:18,502 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:18,502 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:18,503 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:18,503 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:15Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:18Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:14Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:15Z', 'request-id': 'req_011CRo5snV2hkz4KJFutNoG1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdc926e06aa9d-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:18,503 - anthropic._base_client - DEBUG - request_id: req_011CRo5snV2hkz4KJFutNoG1
2025-08-04 13:44:18,504 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 401a030d-0bf9-4c53-8038-779563d23465
2025-08-04 13:44:18,504 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:44:18,505 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:44:18,505 - __main__ - INFO - Added assistant response to memory - length: 797
2025-08-04 13:44:18,505 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 4169ms, correlation_id: a320aac0-ae67-4793-816b-73f18560f6c7
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'explain the data and extract key insights'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'
üîç SEARCH DEBUG: doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', in_store=True, store_keys=49
INFO:     127.0.0.1:51089 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:51172 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:44:25,894 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what should i focus on as cfo of the bank, correlation_id: 99a86398-2c3e-4fa1-b3a3-a3eab3b48098
2025-08-04 13:44:25,894 - __main__ - INFO - Loaded memory context - short_term: 7, summaries: 3
2025-08-04 13:44:25,895 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:44:25,895 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what should i focus on as cfo of the bank...
2025-08-04 13:44:25,895 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 177cad4f-51df-4800-a911-a855032eb31e, Strategy: adaptive
2025-08-04 13:44:25,895 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:44:25,895 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what should i focus on as cfo of the bank...'
2025-08-04 13:44:25,895 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: data_analysis
2025-08-04 13:44:25,895 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:44:25,895 - orchestrator_v2.planning_engine_enhanced - INFO - üîç DATA ANALYSIS DEBUG: active_documents=['20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'], doc_name=20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv
2025-08-04 13:44:25,895 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created data_analysis plan with 2 steps
2025-08-04 13:44:25,895 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 2 steps
2025-08-04 13:44:25,895 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:44:25,895 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: data_analysis_1754329465
2025-08-04 13:44:25,895 - orchestrator_v2.execution_engine - INFO - Executing step: search_table_data (search_uploaded_docs)
2025-08-04 13:44:25,895 - orchestrator_v2.execution_engine - INFO - üîç EXECUTION DEBUG: tool=search_uploaded_docs, resolved_params={'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'what should i focus on as cfo of the bank'}
2025-08-04 13:44:25,895 - orchestrator_v2.execution_engine - INFO - Step 'search_table_data' completed successfully
2025-08-04 13:44:25,895 - orchestrator_v2.execution_engine - INFO - Executing step: table_summary (synthesize_content)
2025-08-04 13:44:25,895 - tools.synthesis_tools - INFO - Synthesizing data_summary for query: 'what should i focus on as cfo of the bank' from 1 documents
2025-08-04 13:44:25,896 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c363369d-15e2-4d02-a5f0-e3cf13fa4f0e', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please synthesize the following documents to address the query.\n\nQuery: what should i focus on as cfo of the bank\nSynthesis Type: data_summary\n\nDocuments:\n=== 1 ===\n# CSV Data: 20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%\n\nPlease provide a comprehensive response addressing the query based on the document content.\n\nResponse:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:25,896 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:25,896 - httpcore.connection - DEBUG - close.started
2025-08-04 13:44:25,896 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:44:25,896 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:44:25,910 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8e1850>
2025-08-04 13:44:25,910 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:44:25,934 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15a21a830>
2025-08-04 13:44:25,934 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:25,934 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:25,934 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:25,934 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:25,934 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:32,222 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:26Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:32Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:26Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:26Z'), (b'request-id', b'req_011CRo5tdxbfwcEFruoby3Db'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdcdaab51ab5d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:32,223 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:32,223 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:32,223 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:32,224 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:32,224 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:32,224 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:26Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:32Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:26Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:26Z', 'request-id': 'req_011CRo5tdxbfwcEFruoby3Db', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdcdaab51ab5d-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:32,224 - anthropic._base_client - DEBUG - request_id: req_011CRo5tdxbfwcEFruoby3Db
2025-08-04 13:44:32,225 - tools.synthesis_tools - INFO - Successfully synthesized data_summary for query 'what should i focus on as cfo of the bank'
2025-08-04 13:44:32,225 - orchestrator_v2.execution_engine - INFO - Step 'table_summary' completed successfully
2025-08-04 13:44:32,225 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:44:32,226 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-a52824a8-4647-4bab-b42e-ae1617d1d0d8', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what should i focus on as cfo of the bank"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_uploaded_docs, confidence: 0.95):\n[{\'page_content\': \'# CSV Data: 20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv\\n\\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\\n Corporate Banking        450      180.5       145.2      35.3       12.5%\\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\\n Wealth Management        280       95.2        67.8      27.4       15.7%\\nInvestment Banking        180      220.3       165.9      54.4       22.1%\\n  Digital Services        350       78.9        62.1      16.8       45.2%\\n   Risk Management        125        0.0        28.5     -28.5          0%\\n        Operations        800        5.2        95.6     -90.4       -2.1%\\n        Technology        420       12.3       156.8    -144.5       18.9%\\n   Human Resources         85        0.0        18.7     -18.7          0%\\n         Marketing        120        2.1        45.3     -43.2       25.6%\', \'metadata\': {\'source\': \'global_uploads/20250801_21511...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'data_summary\', \'query\': \'what should i focus on as cfo of the bank\', \'result\': \'Based on the financial data provided, here are the key areas you should focus on as CFO of the bank:\\n\\n1. Cost Management in Support Functions:\\n- The largest losses are coming from Technology (-$144.5M), Operations (-$90.4M), and Marketing (-$43.2M)\\n- These support functions represent significant cost centers that need immediate attention for optimization\\n\\n2. Revenue Generating Divisions:\\n- Investment Banking is the most profitable unit ($54.4M profit) with strong growth (22.1%)\\n- Personal Banking has the highest revenue ($320.8M) but relatively low profit margins\\n- Corporate Banking and Wealth Management show healthy profits and growth rates\\n\\n3. Strategic Priorities:\\n- Digital Services shows the highest growth rate (45.2%) and positive profits, suggesting potential for future expansion\\n- Technology spending ($156.8M) is high but necessary; focus on improving...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:32,226 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:32,227 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:32,227 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:32,227 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:32,227 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:32,227 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:38,674 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:38 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:32Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:38Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:32Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:32Z'), (b'request-id', b'req_011CRo5u6qNB7vTJMyCcRoVj'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdd01f96fab5d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:38,674 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:38,674 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:38,674 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:38,674 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:38,675 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:38,675 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:38 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:32Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:38Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:32Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:32Z', 'request-id': 'req_011CRo5u6qNB7vTJMyCcRoVj', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdd01f96fab5d-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:38,675 - anthropic._base_client - DEBUG - request_id: req_011CRo5u6qNB7vTJMyCcRoVj
2025-08-04 13:44:38,676 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 177cad4f-51df-4800-a911-a855032eb31e
2025-08-04 13:44:38,676 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:44:38,676 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:44:38,677 - __main__ - INFO - Added assistant response to memory - length: 1506
2025-08-04 13:44:38,677 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 12781ms, correlation_id: 99a86398-2c3e-4fa1-b3a3-a3eab3b48098
üîç EXECUTION PRINT: About to call search_uploaded_docs with params {'doc_name': '20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', 'query': 'what should i focus on as cfo of the bank'}
üîç FUNCTION CALLED: search_uploaded_docs with doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv'
üîç SEARCH DEBUG: doc_name='20250801_215110_09205507-73f4-4fec-8792-3cdb156bcd39_test_business_data.csv', in_store=True, store_keys=49
INFO:     127.0.0.1:51174 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:51315 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:44:45,847 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what have we discussed about riskandfinance document previously in our memory, correlation_id: f8455756-4a4d-46ec-b8f7-06fd1da6cf15
2025-08-04 13:44:45,847 - __main__ - INFO - Loaded memory context - short_term: 9, summaries: 3
2025-08-04 13:44:45,848 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:44:45,848 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what have we discussed about riskandfinance document previously in our memory...
2025-08-04 13:44:45,848 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 4bad343d-1449-483a-b3eb-6b4bc7a6bf98, Strategy: adaptive
2025-08-04 13:44:45,848 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:44:45,848 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what have we discussed about riskandfinance document previously in our memory...'
2025-08-04 13:44:45,848 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: memory_search
2025-08-04 13:44:45,848 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: knowledge_base_embeddings
2025-08-04 13:44:45,848 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created memory_search plan with 3 steps
2025-08-04 13:44:45,848 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 3 steps
2025-08-04 13:44:45,848 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:44:45,848 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: memory_search_1754329485
2025-08-04 13:44:45,848 - orchestrator_v2.execution_engine - INFO - Executing step: search_conversation (search_conversation_history)
2025-08-04 13:44:45,848 - tools.search_tools - INFO - Searching conversation history for: 'what have we discussed about riskandfinance document previously in our memory'
2025-08-04 13:44:45,848 - tools.search_tools - INFO - Found 10 conversation history results for 'what have we discussed about riskandfinance document previously in our memory'
2025-08-04 13:44:45,848 - orchestrator_v2.execution_engine - INFO - Executing step: search_long_term_memory (search_knowledge_base)
2025-08-04 13:44:45,848 - tools.search_tools - INFO - Searching knowledge base for: 'what have we discussed about riskandfinance document previously in our memory'
2025-08-04 13:44:45,849 - tools.search_tools - INFO - Found 1 files in knowledge base, falling back to LLM knowledge
2025-08-04 13:44:45,849 - orchestrator_v2.execution_engine - INFO - Step 'search_conversation' completed successfully
2025-08-04 13:44:45,849 - orchestrator_v2.execution_engine - INFO - Step 'search_long_term_memory' completed successfully
2025-08-04 13:44:45,849 - orchestrator_v2.execution_engine - INFO - Executing step: synthesize_memory_results (synthesize_content)
2025-08-04 13:44:45,849 - tools.synthesis_tools - INFO - Synthesizing memory_recall for query: 'what have we discussed about riskandfinance document previously in our memory' from 5 documents
2025-08-04 13:44:45,849 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-e5e2357c-3e5c-42d8-a334-dcf43f891b73', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': "Please synthesize the following documents to address the query.\n\nQuery: what have we discussed about riskandfinance document previously in our memory\nSynthesis Type: memory_recall\n\nDocuments:\n\n\nYou are comparing 5 separate documents:\n1. 1\n2. 2\n3. 3\n4. 4\n5. 5\n\n=== 1 ===\nwhat have we discussed about riskandfinance document previously in our memory\n=== 2 ===\nBased on the available analysis, these documents contain content about finance and risk management. Here's what we can specifically identify:\n\nThe main document appears to be an educational or instructional text that covers:\n\n1. Understanding Finance\n- Definition and scope of finance\n- Three main categories: personal, corporate, and public finance\n- Focus on money, investments, and financial instruments\n- Core activities like budgeting, saving, investing, and forecasting\n- Goal of maximizing value while balancing liquidity and profitability\n\n2. Risk Concepts\n- Definition of risk in financial context\n- Discussion of uncertainty and potential losses\n- Methods of measuring risk\n- Coverage of market volatility and economic changes\n- Introduction to different types of financial risk, including market risk\n\nThe document appears to be structured in a textbook or educational format, with clear section headers and detailed explanations of fundamental concepts.\n\nNote: While multiple analyses were performed, only one document's content is clearly visible in the results. The second document appears to be missing or inaccessible based on the error message in Analysis 2. For a complete understanding of all documents, we would need access to any additional content.\n=== 3 ===\nI apologize, but I notice that both analyses are empty or contain error messages indicating no actual data was provided to analyze. Without any underlying data or documents to examine, I cannot extract insights or explain any data patterns.\n\nTo properly help you analyze data and extract key insights, I would need:\n1. The actual dataset or documents you'd like to analyze\n2. Information about what type of data you're working with\n3. Any specific aspects you're most interested in understanding\n\nOnce you provide the data you'd like to examine, I'll be happy to:\n- Explain the key patterns and trends\n- Extract meaningful insights\n- Present the findings in a clear, structured way\n- Highlight the most relevant information for your needs\n\nWould you please share the data you'd like me to analyze?\n=== 4 ===\nwhat do these documents contain\n=== 5 ===\nAs CFO of the bank, you should focus on the following key strategic priorities based on the financial data:\n\n1. Cost Optimization in Support Functions\n- Address significant losses in Technology (-$144.5M), Operations (-$90.4M), and Marketing (-$43.2M)\n- Implement cost reduction initiatives while maintaining operational effectiveness\n- Review and optimize resource allocation across support departments\n\n2. Revenue Growth Management\n- Leverage high-performing divisions:\n  * Investment Banking ($54.4M profit, 22.1% growth)\n  * Personal Banking ($320.8M revenue)\n  * Corporate Banking ($35.3M profit, 12.5% growth)\n- Enhance profit margins in Personal Banking despite high revenue\n- Support Wealth Management's healthy growth trajectory (15.7%)\n\n3. Digital Transformation Strategy\n- Capitalize on Digital Services' strong growth (45.2%)\n- Optimize technology investments ($156.8M expenses) to improve ROI\n- Balance necessary technological modernization with cost control\n\n4. Performance Monitoring\n- Implement robust financial metrics across all departments\n- Track growth rates and profitability indicators\n- Develop action plans for underperforming units\n\n5. Risk Management\n- Ensure adequate resources for risk management while optimizing costs\n- Balance growth initiatives with risk control measures\n- Monitor department-specific risk indicators\n\nFocus on creating a balanced approach between cost management and strategic investments to drive sustainable growth while improving overall profitability.\n\nPlease provide a comprehensive response addressing the query based on the document content.\n\nResponse:"}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:45,849 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:45,849 - httpcore.connection - DEBUG - close.started
2025-08-04 13:44:45,850 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:44:45,850 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:44:45,867 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8ec470>
2025-08-04 13:44:45,867 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:44:45,890 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8bf110>
2025-08-04 13:44:45,890 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:45,890 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:45,890 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:45,890 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:45,890 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:51,127 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:51 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:46Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:51Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:46Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:46Z'), (b'request-id', b'req_011CRo5v7CUVTGCc9VwNmXdU'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdd575992aae5-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:51,128 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:51,128 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:51,128 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:51,128 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:51,129 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:51,129 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:51 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:46Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:51Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:46Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:46Z', 'request-id': 'req_011CRo5v7CUVTGCc9VwNmXdU', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdd575992aae5-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:51,129 - anthropic._base_client - DEBUG - request_id: req_011CRo5v7CUVTGCc9VwNmXdU
2025-08-04 13:44:51,130 - tools.synthesis_tools - INFO - Successfully synthesized memory_recall for query 'what have we discussed about riskandfinance document previously in our memory'
2025-08-04 13:44:51,130 - orchestrator_v2.execution_engine - INFO - Step 'synthesize_memory_results' completed successfully
2025-08-04 13:44:51,130 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 3, Failed: 0
2025-08-04 13:44:51,131 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c2a082f0-064e-4bee-b1fd-621703ed196d', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what have we discussed about riskandfinance document previously in our memory"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_conversation_history, confidence: 0.80):\n[{\'role\': \'user\', \'content\': \'what have we discussed about riskandfinance document previously in our memory\', \'timestamp\': \'2025-08-04T13:44:45.847988\', \'source\': \'short_term_memory\', \'relevance_score\': 1.0}, {\'role\': \'assistant\', \'content\': "Based on the available analysis, these documents contain content about finance and risk management. Here\'s what we can specifically identify:\\n\\nThe main document appears to be an educational or instructional text that covers:\\n\\n1. Understanding Finance\\n- Definition and scope of finance\\n- Three main categories: personal, corporate, and public finance\\n- Focus on money, investments, and financial instruments\\n- Core activities like budgeting, saving, investing, and forecasting\\n- Goal of maximizing value while balancing liquidity and profitability\\n\\n2. Risk Concepts\\n- Definition of risk in financial context\\n- Discussion of uncertainty and potential losses\\n- Methods of measuring risk\\n- Coverage of market volatility and economic changes\\n- In...\n\n## Analysis 2 (search_knowledge_base, confidence: 0.80):\n[{\'error_type\': \'use_llm_knowledge\', \'success\': False, \'message\': \'Use LLM built-in knowledge to answer the query: what have we discussed about riskandfinance document previously in our memory\', \'suggested_action\': \'synthesize_answer_from_llm_knowledge\', \'retryable\': True, \'replanning_hints\': {\'tool_failed\': True, \'reason\': \'Use LLM built-in knowledge to answer the query: what have we discussed about riskandfinance document previously in our memory\'}}]...\n\n## Analysis 3 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'memory_recall\', \'query\': \'what have we discussed about riskandfinance document previously in our memory\', \'result\': "Based on our previous discussions about the riskandfinance document, I can recall two main instances where this topic was covered:\\n\\n1. There was a discussion about fundamental finance and risk concepts, which included:\\n- Basic definitions of finance covering personal, corporate, and public finance\\n- Core financial activities like budgeting, saving, investing, and forecasting\\n- Risk management concepts and definitions\\n- Discussion of uncertainty and potential losses\\n- Methods of measuring risk\\n- Coverage of market volatility and economic changes\\n\\n2. There was also a more specific discussion related to banking and financial management that covered:\\n- Strategic financial priorities for banking operations\\n- Cost optimization in support functions\\n- Revenue growth management across different banking divisions\\n- Digital transfo...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:44:51,132 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:44:51,132 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:44:51,133 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:44:51,133 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:44:51,133 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:44:51,133 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:44:55,259 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:44:55 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:44:51Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:44:55Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:44:51Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:44:51Z'), (b'request-id', b'req_011CRo5vVdM88FsLcCs3J6iq'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdd7829dfaae5-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:44:55,260 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:44:55,260 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:44:55,261 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:44:55,261 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:44:55,261 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:44:55,261 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:44:55 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:44:51Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:44:55Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:44:51Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:44:51Z', 'request-id': 'req_011CRo5vVdM88FsLcCs3J6iq', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdd7829dfaae5-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:44:55,262 - anthropic._base_client - DEBUG - request_id: req_011CRo5vVdM88FsLcCs3J6iq
2025-08-04 13:44:55,263 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 4bad343d-1449-483a-b3eb-6b4bc7a6bf98
2025-08-04 13:44:55,263 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.85 confidence
2025-08-04 13:44:55,263 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.85 confidence
2025-08-04 13:44:55,268 - __main__ - INFO - Added assistant response to memory - length: 1271
2025-08-04 13:44:55,268 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 9415ms, correlation_id: f8455756-4a4d-46ec-b8f7-06fd1da6cf15
INFO:     127.0.0.1:51317 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:51440 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:45:01,985 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what is cet ratio, correlation_id: 39262cf8-4bf8-439a-aba0-f565ff3728ce
2025-08-04 13:45:01,985 - __main__ - INFO - Loaded memory context - short_term: 6, summaries: 3
2025-08-04 13:45:01,986 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:45:01,986 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what is cet ratio...
2025-08-04 13:45:01,986 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: a66d1a7c-9dea-43c9-9d41-be3a2a651eca, Strategy: adaptive
2025-08-04 13:45:01,986 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:45:01,986 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what is cet ratio...'
2025-08-04 13:45:01,986 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: qa_fallback_chain
2025-08-04 13:45:01,986 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: knowledge_base_embeddings
2025-08-04 13:45:01,986 - orchestrator_v2.planning_engine_enhanced - INFO - ‚úÖ Created qa_fallback_chain plan with 3 steps
2025-08-04 13:45:01,986 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 3 steps
2025-08-04 13:45:01,986 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:45:01,986 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: qa_fallback_1754329501
2025-08-04 13:45:01,986 - orchestrator_v2.execution_engine - INFO - Executing step: knowledge_search (search_knowledge_base)
2025-08-04 13:45:01,986 - tools.search_tools - INFO - Searching knowledge base for: 'what is cet ratio'
2025-08-04 13:45:01,986 - tools.search_tools - INFO - Found 1 files in knowledge base, falling back to LLM knowledge
2025-08-04 13:45:01,986 - orchestrator_v2.execution_engine - INFO - Step 'knowledge_search' completed successfully
2025-08-04 13:45:01,986 - orchestrator_v2.execution_engine - INFO - Executing step: synthesize_fallback (synthesize_content)
2025-08-04 13:45:01,986 - tools.synthesis_tools - INFO - Synthesizing qa_response for query: 'what is cet ratio' from 1 documents
2025-08-04 13:45:01,986 - tools.synthesis_tools - INFO - No documents found, using LLM knowledge for query: what is cet ratio
2025-08-04 13:45:01,987 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-1e2b20f4-5130-4166-840d-9b7f1bd556c1', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please answer this query using your built-in knowledge:\n\nQuery: what is cet ratio\n\nPlease provide a comprehensive, professional response that:\n1. Directly answers the question\n2. Includes relevant details and context\n3. Uses a helpful, informative tone\n4. Is structured clearly and logically\n\nIf this is about finance, risk, or business topics, provide expert-level insights appropriate for a professional context.\n\nResponse:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:45:01,987 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:45:01,987 - httpcore.connection - DEBUG - close.started
2025-08-04 13:45:01,987 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:45:01,987 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:45:02,000 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8e6ad0>
2025-08-04 13:45:02,000 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:45:02,019 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e843920>
2025-08-04 13:45:02,020 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:45:02,020 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:45:02,020 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:45:02,020 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:45:02,020 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:45:07,960 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:45:08 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:45:02Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:45:08Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:45:02Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:45:02Z'), (b'request-id', b'req_011CRo5wJE2YzJ8Qt7epEpiL'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fddbc2959ab03-YYZ')])
2025-08-04 13:45:07,961 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:45:07,961 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:45:07,962 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:45:07,962 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:45:07,962 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:45:07,962 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:45:08 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:45:02Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:45:08Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:45:02Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:45:02Z', 'request-id': 'req_011CRo5wJE2YzJ8Qt7epEpiL', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fddbc2959ab03-YYZ'})
2025-08-04 13:45:07,963 - anthropic._base_client - DEBUG - request_id: req_011CRo5wJE2YzJ8Qt7epEpiL
2025-08-04 13:45:07,964 - orchestrator_v2.execution_engine - INFO - Step 'synthesize_fallback' completed successfully
2025-08-04 13:45:07,964 - orchestrator_v2.execution_engine - ERROR - Execution stuck - no executable steps available
2025-08-04 13:45:07,964 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 2, Failed: 0
2025-08-04 13:45:07,965 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-21d8ec47-af70-4ea1-a3e7-6ff6af512c79', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what is cet ratio"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (search_knowledge_base, confidence: 0.80):\n[{\'error_type\': \'use_llm_knowledge\', \'success\': False, \'message\': \'Use LLM built-in knowledge to answer the query: what is cet ratio\', \'suggested_action\': \'synthesize_answer_from_llm_knowledge\', \'retryable\': True, \'replanning_hints\': {\'tool_failed\': True, \'reason\': \'Use LLM built-in knowledge to answer the query: what is cet ratio\'}}]...\n\n## Analysis 2 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'qa_response\', \'query\': \'what is cet ratio\', \'result\': "The CET Ratio (Common Equity Tier 1 Ratio) is a key financial metric used in banking and financial regulation to measure a bank\'s core capital strength relative to its risk-weighted assets. Here\'s a comprehensive explanation:\\n\\nDefinition:\\nCET Ratio = (Common Equity Tier 1 Capital / Risk-Weighted Assets) √ó 100%\\n\\nKey Components:\\n\\n1. Common Equity Tier 1 (CET1) Capital includes:\\n- Common shares\\n- Retained earnings\\n- Other comprehensive income\\n- Qualifying minority interests\\n- Regulatory adjustments\\n\\n2. Risk-Weighted Assets (RWA):\\n- Bank assets weighted according to their risk level\\n- Higher-risk assets require more capital backing\\n- Calculated using standardized approaches or internal models\\n\\nImportance:\\n- Primary measure of bank financial strength\\n- Key indicator for regulators and investors\\n- Part of Basel III international banking standards\\n\\nRegulatory Requirements:\\n- Mi...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:45:07,966 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:45:07,966 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:45:07,967 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:45:07,967 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:45:07,967 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:45:07,967 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:45:11,543 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:45:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:45:08Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:45:11Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:45:08Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:45:08Z'), (b'request-id', b'req_011CRo5wjbFzdgr34CActMkY'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fdde15805ab03-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:45:11,544 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:45:11,544 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:45:11,545 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:45:11,545 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:45:11,545 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:45:11,545 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:45:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:45:08Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:45:11Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:45:08Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:45:08Z', 'request-id': 'req_011CRo5wjbFzdgr34CActMkY', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fdde15805ab03-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:45:11,545 - anthropic._base_client - DEBUG - request_id: req_011CRo5wjbFzdgr34CActMkY
2025-08-04 13:45:11,547 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: a66d1a7c-9dea-43c9-9d41-be3a2a651eca
2025-08-04 13:45:11,547 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.88 confidence
2025-08-04 13:45:11,547 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.88 confidence
2025-08-04 13:45:11,548 - __main__ - INFO - Added assistant response to memory - length: 1082
2025-08-04 13:45:11,548 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 9562ms, correlation_id: 39262cf8-4bf8-439a-aba0-f565ff3728ce
INFO:     127.0.0.1:51442 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:52892 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:48:05,392 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what do these documents contain, correlation_id: de8d0680-0455-4f16-a798-0cbab667637b
2025-08-04 13:48:05,393 - __main__ - INFO - Loaded memory context - short_term: 8, summaries: 3
2025-08-04 13:48:05,393 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:48:05,393 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what do these documents contain...
2025-08-04 13:48:05,393 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 25a54350-1d40-467b-aa49-be9080649957, Strategy: adaptive
2025-08-04 13:48:05,393 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:48:05,393 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what do these documents contain...'
2025-08-04 13:48:05,393 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: multi_doc_comparison
2025-08-04 13:48:05,393 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:48:05,393 - orchestrator_v2.planning_engine_enhanced - ERROR - Enhanced planning error: 'financial_comparison'
2025-08-04 13:48:05,393 - orchestrator_v2.planning_engine - INFO - Creating execution plan for query: 'what do these documents contain...' using adaptive strategy
2025-08-04 13:48:05,394 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c0b1328c-40b8-4d19-b5e5-94d8de721551', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Create an execution plan for the user query using available tools.\n\nUser Query: what do these documents contain\nSession ID: terminal-test-session\nActive Documents: [\'riskandfinace.pdf\', \'20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf\']\nStrategy: adaptive\n\nAVAILABLE TOOLS WITH EXACT PARAMETER NAMES:\n- create_statistical_plot: Create statistical plots for data analysis\n  Parameters: {"data": List (REQUIRED), "plot_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- analyze_text_metrics: Analyze comprehensive text metrics and readability\n  Parameters: {"text": str (REQUIRED)}\n- discover_document_structure: Analyze document structure and extract metadata\n  Parameters: {"doc_name": str (REQUIRED)}\n- extract_key_phrases: Extract key phrases and important terms\n  Parameters: {"text": str (REQUIRED), "top_n": int (optional), "min_length": int (optional)}\n- upload_document: Process and store a document for analysis\n  Parameters: {"file_path": str (REQUIRED), "session_id": str (optional), "additional_metadata": dict (optional), "original_filename": str (optional)}\n- calculate_statistics: Calculate statistical metrics for numerical data\n  Parameters: {"data": List (REQUIRED), "metrics": List (optional)}\n- create_wordcloud: Generate word cloud visualizations\n  Parameters: {"text": str (REQUIRED), "max_words": int (optional), "save_path": Optional (optional)}\n- get_all_documents: Get list of all uploaded documents across sessions\n  Parameters: {}\n- analyze_sentiment: Perform sentiment analysis on text content\n  Parameters: {"text": str (REQUIRED)}\n- search_knowledge_base: Search the general knowledge base\n  Parameters: {"query": str (REQUIRED)}\n- create_comparison_chart: Create comparison charts with multiple datasets\n  Parameters: {"datasets": Dict (REQUIRED), "chart_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- process_table_data: Process and analyze tabular data\n  Parameters: {"table_data": List (REQUIRED), "operation": str (REQUIRED)}\n- execute_python_code: Execute Python code for data analysis and calculations\n  Parameters: {"code": str (REQUIRED), "context": Dict (optional)}\n- search_conversation_history: Search previous conversation history\n  Parameters: {"query": str (REQUIRED)}\n- search_uploaded_docs: Search within uploaded documents with filtering options\n  Parameters: {"doc_name": str (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- search_multiple_docs: Search across multiple documents simultaneously\n  Parameters: {"doc_names": List (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- remove_document: Remove a specific document from storage\n  Parameters: {"doc_name": str (REQUIRED)}\n- synthesize_content: Generate cohesive synthesis from multiple content chunks\n  Parameters: {"documents": List (REQUIRED), "query": str (REQUIRED), "synthesis_type": str (optional)}\n- extract_entities: Extract named entities from text\n  Parameters: {"text": str (REQUIRED)}\n- create_chart: Create various types of charts and graphs\n  Parameters: {"data": Dict (REQUIRED), "chart_type": str (REQUIRED), "title": str (optional), "save_path": Optional (optional)}\n\nCRITICAL PARAMETER RULES:\n- ALWAYS use exact parameter names shown above\n- For search_uploaded_docs: use "doc_name" (NOT "doc_id")\n- For synthesize_content: use "documents" and "query" (REQUIRED)\n- For extract_key_phrases: use "text" (NOT "text_input" or "input_text")\n- For create_wordcloud: use "text" (NOT "text_input")\n- For discover_document_structure: use "doc_name" (NOT "doc_id")\n\nCONDITION GUIDELINES:\n- Use "always" for steps that should always execute\n- Use "on_success" for steps that depend on previous step success\n- Use "on_failure" for error handling steps\n\nReturn a JSON plan with this structure:\n{\n    "strategy": "adaptive",\n    "steps": [\n        {\n            "id": "step_1",\n            "tool": "tool_name",\n            "parameters": {"exact_param_name": "value"},\n            "dependencies": [],\n            "condition": "always",\n            "description": "What this step does"\n        }\n    ]\n}\n\nCreate a plan that addresses the user query effectively using the available tools with EXACT parameter names.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:48:05,394 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:48:05,394 - httpcore.connection - DEBUG - close.started
2025-08-04 13:48:05,394 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:48:05,394 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:48:05,426 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e84d7d0>
2025-08-04 13:48:05,426 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:48:05,446 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e84ced0>
2025-08-04 13:48:05,446 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:48:05,446 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:48:05,446 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:48:05,446 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:48:05,446 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:48:14,535 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:48:14 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:48:06Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:48:15Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:48:05Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:48:06Z'), (b'request-id', b'req_011CRo6ApRLKXAb1Rxa3LDV6'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe2369ba9ac42-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:48:14,536 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:48:14,537 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:48:14,537 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:48:14,538 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:48:14,538 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:48:14,538 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:48:14 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:48:06Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:48:15Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:48:05Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:48:06Z', 'request-id': 'req_011CRo6ApRLKXAb1Rxa3LDV6', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe2369ba9ac42-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:48:14,538 - anthropic._base_client - DEBUG - request_id: req_011CRo6ApRLKXAb1Rxa3LDV6
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - INFO - Created execution plan with 5 steps
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - DEBUG - Step step_1: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - DEBUG - Step step_2: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - DEBUG - Step step_3: search_multiple_docs with condition ConditionType.ON_SUCCESS
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - DEBUG - Step step_4: extract_key_phrases with condition ConditionType.ON_SUCCESS
2025-08-04 13:48:14,540 - orchestrator_v2.planning_engine - DEBUG - Step step_5: synthesize_content with condition ConditionType.ON_SUCCESS
2025-08-04 13:48:14,540 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 5 steps
2025-08-04 13:48:14,540 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:48:14,540 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: plan_1754329694
2025-08-04 13:48:14,540 - orchestrator_v2.execution_engine - INFO - Executing step: step_1 (discover_document_structure)
2025-08-04 13:48:14,541 - orchestrator_v2.execution_engine - INFO - Executing step: step_2 (discover_document_structure)
2025-08-04 13:48:14,541 - orchestrator_v2.execution_engine - INFO - Step 'step_1' completed successfully
2025-08-04 13:48:14,541 - orchestrator_v2.execution_engine - INFO - Step 'step_2' completed successfully
2025-08-04 13:48:14,541 - orchestrator_v2.execution_engine - INFO - Executing step: step_3 (search_multiple_docs)
2025-08-04 13:48:14,542 - orchestrator_v2.execution_engine - INFO - Step 'step_3' completed successfully
2025-08-04 13:48:14,542 - orchestrator_v2.execution_engine - INFO - Executing step: step_4 (extract_key_phrases)
2025-08-04 13:48:14,542 - orchestrator_v2.execution_engine - INFO - Step 'step_4' completed successfully
2025-08-04 13:48:14,542 - orchestrator_v2.execution_engine - INFO - Executing step: step_5 (synthesize_content)
2025-08-04 13:48:14,543 - tools.synthesis_tools - INFO - Synthesizing summary for query: 'What are the main topics and content of these documents?' from 2 documents
2025-08-04 13:48:14,543 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-b89699f9-00bc-4499-9f95-b4316ab4cb05', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a comprehensive summary based on the following documents and query.\n\nQuery: What are the main topics and content of these documents?\n\nDocuments:\n\n\nYou are comparing 2 separate documents:\n1. 1\n2. 2\n\n=== 1 ===\nriskandfinace.pdf\n=== 2 ===\n20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf\n\nPlease synthesize the information to answer the query with:\n1. A clear, direct answer to the query\n2. Supporting evidence from the documents\n3. Key insights and patterns\n4. Any limitations or gaps in the information\n\nSynthesis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:48:14,544 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:48:14,545 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:48:14,545 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:48:14,545 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:48:14,546 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:48:14,546 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:48:18,118 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:48:18 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:48:15Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:48:18Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:48:14Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:48:15Z'), (b'request-id', b'req_011CRo6BVMeKg5svtM24pYci'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe26f7cb2ac42-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:48:18,119 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:48:18,119 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:48:18,119 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:48:18,119 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:48:18,120 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:48:18,120 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:48:18 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:48:15Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:48:18Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:48:14Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:48:15Z', 'request-id': 'req_011CRo6BVMeKg5svtM24pYci', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe26f7cb2ac42-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:48:18,120 - anthropic._base_client - DEBUG - request_id: req_011CRo6BVMeKg5svtM24pYci
2025-08-04 13:48:18,121 - tools.synthesis_tools - INFO - Successfully synthesized summary for query 'What are the main topics and content of these documents?'
2025-08-04 13:48:18,121 - orchestrator_v2.execution_engine - INFO - Step 'step_5' completed successfully
2025-08-04 13:48:18,122 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 5, Failed: 0
2025-08-04 13:48:18,122 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-568c2c1f-c59d-4ed3-a7c9-7ed2a15ddb3f', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what do these documents contain"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 2 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 3 (search_multiple_docs, confidence: 0.95):\n[]...\n\n## Analysis 4 (extract_key_phrases, confidence: 0.95):\n{\'status\': \'success\', \'top_words\': {\'step_3_output\': 1}, \'top_bigrams\': {}, \'top_trigrams\': {}, \'total_unique_words\': 1, \'total_unique_bigrams\': 0, \'total_unique_trigrams\': 0}...\n\n## Analysis 5 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'summary\', \'query\': \'What are the main topics and content of these documents?\', \'result\': \'I apologize, but I don\\\'t see the actual content of the documents you\\\'re referencing - I only see the filenames "riskandfinance.pdf" and "20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf" without their contents. Without access to the actual content of these documents, I cannot:\\n\\n1. Provide a meaningful summary of their main topics\\n2. Extract supporting evidence\\n3. Identify key insights and patterns\\n4. Point out limitations or gaps\\n\\nTo provide a comprehensive synthesis, I would need:\\n- The actual text/content of both documents\\n- Any relevant context about these documents\\n- Specific sections or passages you\\\'d like me to analyze\\n\\nWould you please share the content of these documents so I can properly analyze and synthesize the information for you?\', \'documents_processed\': 2, \'content_length\': 775, \'processing_details\': {\'model_u...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:48:18,123 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:48:18,123 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:48:18,124 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:48:18,124 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:48:18,124 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:48:18,124 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:48:22,930 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:48:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:48:18Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:48:23Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:48:18Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:48:18Z'), (b'request-id', b'req_011CRo6BkcRCckfsmxYUcjAP'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe285df32ac42-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:48:22,930 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:48:22,931 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:48:22,931 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:48:22,931 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:48:22,932 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:48:22,932 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:48:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:48:18Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:48:23Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:48:18Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:48:18Z', 'request-id': 'req_011CRo6BkcRCckfsmxYUcjAP', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe285df32ac42-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:48:22,932 - anthropic._base_client - DEBUG - request_id: req_011CRo6BkcRCckfsmxYUcjAP
2025-08-04 13:48:22,933 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 25a54350-1d40-467b-aa49-be9080649957
2025-08-04 13:48:22,933 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:48:22,933 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:48:22,934 - __main__ - INFO - Added assistant response to memory - length: 942
2025-08-04 13:48:22,934 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 17540ms, correlation_id: de8d0680-0455-4f16-a798-0cbab667637b
INFO:     127.0.0.1:52894 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:53629 - "GET /system/status HTTP/1.1" 200 OK
2025-08-04 13:49:41,595 - __main__ - INFO - Frontend Chat request - session: terminal-test-session, query: what do these documents contain, correlation_id: 9712358b-1930-457c-8d71-78cf22c100c9
2025-08-04 13:49:41,596 - __main__ - INFO - Loaded memory context - short_term: 10, summaries: 3
2025-08-04 13:49:41,597 - orchestrator_integration - INFO - üöÄ Using Orchestrator 2.0
2025-08-04 13:49:41,597 - orchestrator_v2.orchestrator_v2 - INFO - üöÄ Orchestrator 2.0 executing query: what do these documents contain...
2025-08-04 13:49:41,597 - orchestrator_v2.orchestrator_v2 - INFO - üìã Execution ID: 8e3caae3-7e7e-45ad-8bc1-75c32d540d8f, Strategy: adaptive
2025-08-04 13:49:41,597 - orchestrator_v2.orchestrator_v2 - INFO - ü§î Generating execution plan...
2025-08-04 13:49:41,597 - orchestrator_v2.planning_engine_enhanced - INFO - üéØ AI Finance and Risk Agent creating plan for: 'what do these documents contain...'
2025-08-04 13:49:41,597 - orchestrator_v2.planning_engine_enhanced - INFO - üìã Classified workflow: multi_doc_comparison
2025-08-04 13:49:41,597 - orchestrator_v2.planning_engine_enhanced - INFO - üíæ Primary memory source: uploaded_documents
2025-08-04 13:49:41,597 - orchestrator_v2.planning_engine_enhanced - ERROR - Enhanced planning error: 'financial_comparison'
2025-08-04 13:49:41,597 - orchestrator_v2.planning_engine - INFO - Creating execution plan for query: 'what do these documents contain...' using adaptive strategy
2025-08-04 13:49:41,598 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-e398140b-08b4-47e1-acee-993c2a3b5c3f', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Create an execution plan for the user query using available tools.\n\nUser Query: what do these documents contain\nSession ID: terminal-test-session\nActive Documents: [\'riskandfinace.pdf\', \'20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf\']\nStrategy: adaptive\n\nAVAILABLE TOOLS WITH EXACT PARAMETER NAMES:\n- create_statistical_plot: Create statistical plots for data analysis\n  Parameters: {"data": List (REQUIRED), "plot_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- analyze_text_metrics: Analyze comprehensive text metrics and readability\n  Parameters: {"text": str (REQUIRED)}\n- discover_document_structure: Analyze document structure and extract metadata\n  Parameters: {"doc_name": str (REQUIRED)}\n- extract_key_phrases: Extract key phrases and important terms\n  Parameters: {"text": str (REQUIRED), "top_n": int (optional), "min_length": int (optional)}\n- upload_document: Process and store a document for analysis\n  Parameters: {"file_path": str (REQUIRED), "session_id": str (optional), "additional_metadata": dict (optional), "original_filename": str (optional)}\n- calculate_statistics: Calculate statistical metrics for numerical data\n  Parameters: {"data": List (REQUIRED), "metrics": List (optional)}\n- create_wordcloud: Generate word cloud visualizations\n  Parameters: {"text": str (REQUIRED), "max_words": int (optional), "save_path": Optional (optional)}\n- get_all_documents: Get list of all uploaded documents across sessions\n  Parameters: {}\n- analyze_sentiment: Perform sentiment analysis on text content\n  Parameters: {"text": str (REQUIRED)}\n- search_knowledge_base: Search the general knowledge base\n  Parameters: {"query": str (REQUIRED)}\n- create_comparison_chart: Create comparison charts with multiple datasets\n  Parameters: {"datasets": Dict (REQUIRED), "chart_type": str (optional), "title": str (optional), "save_path": Optional (optional)}\n- process_table_data: Process and analyze tabular data\n  Parameters: {"table_data": List (REQUIRED), "operation": str (REQUIRED)}\n- execute_python_code: Execute Python code for data analysis and calculations\n  Parameters: {"code": str (REQUIRED), "context": Dict (optional)}\n- search_conversation_history: Search previous conversation history\n  Parameters: {"query": str (REQUIRED)}\n- search_uploaded_docs: Search within uploaded documents with filtering options\n  Parameters: {"doc_name": str (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- search_multiple_docs: Search across multiple documents simultaneously\n  Parameters: {"doc_names": List (REQUIRED), "query": str (optional), "filter_by_metadata": dict (optional)}\n- remove_document: Remove a specific document from storage\n  Parameters: {"doc_name": str (REQUIRED)}\n- synthesize_content: Generate cohesive synthesis from multiple content chunks\n  Parameters: {"documents": List (REQUIRED), "query": str (REQUIRED), "synthesis_type": str (optional)}\n- extract_entities: Extract named entities from text\n  Parameters: {"text": str (REQUIRED)}\n- create_chart: Create various types of charts and graphs\n  Parameters: {"data": Dict (REQUIRED), "chart_type": str (REQUIRED), "title": str (optional), "save_path": Optional (optional)}\n\nCRITICAL PARAMETER RULES:\n- ALWAYS use exact parameter names shown above\n- For search_uploaded_docs: use "doc_name" (NOT "doc_id")\n- For synthesize_content: use "documents" and "query" (REQUIRED)\n- For extract_key_phrases: use "text" (NOT "text_input" or "input_text")\n- For create_wordcloud: use "text" (NOT "text_input")\n- For discover_document_structure: use "doc_name" (NOT "doc_id")\n\nCONDITION GUIDELINES:\n- Use "always" for steps that should always execute\n- Use "on_success" for steps that depend on previous step success\n- Use "on_failure" for error handling steps\n\nReturn a JSON plan with this structure:\n{\n    "strategy": "adaptive",\n    "steps": [\n        {\n            "id": "step_1",\n            "tool": "tool_name",\n            "parameters": {"exact_param_name": "value"},\n            "dependencies": [],\n            "condition": "always",\n            "description": "What this step does"\n        }\n    ]\n}\n\nCreate a plan that addresses the user query effectively using the available tools with EXACT parameter names.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:49:41,598 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:49:41,598 - httpcore.connection - DEBUG - close.started
2025-08-04 13:49:41,598 - httpcore.connection - DEBUG - close.complete
2025-08-04 13:49:41,598 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-04 13:49:41,619 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8f44b0>
2025-08-04 13:49:41,619 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x15a158440> server_hostname='api.anthropic.com' timeout=None
2025-08-04 13:49:41,644 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x15e8f4520>
2025-08-04 13:49:41,644 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:49:41,644 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:49:41,645 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:49:41,645 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:49:41,645 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:49:50,589 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:49:50 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:49:42Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:49:51Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:49:41Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:49:42Z'), (b'request-id', b'req_011CRo6HupEHW3xTFcbMWxcb'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe48fdf4a36c5-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:49:50,590 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:49:50,591 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:49:50,591 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:49:50,591 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:49:50,592 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:49:50,592 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:49:50 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:49:42Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:49:51Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:49:41Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:49:42Z', 'request-id': 'req_011CRo6HupEHW3xTFcbMWxcb', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe48fdf4a36c5-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:49:50,592 - anthropic._base_client - DEBUG - request_id: req_011CRo6HupEHW3xTFcbMWxcb
2025-08-04 13:49:50,594 - orchestrator_v2.planning_engine - INFO - Created execution plan with 5 steps
2025-08-04 13:49:50,594 - orchestrator_v2.planning_engine - DEBUG - Step step_1: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:49:50,594 - orchestrator_v2.planning_engine - DEBUG - Step step_2: discover_document_structure with condition ConditionType.ALWAYS
2025-08-04 13:49:50,594 - orchestrator_v2.planning_engine - DEBUG - Step step_3: search_multiple_docs with condition ConditionType.ON_SUCCESS
2025-08-04 13:49:50,594 - orchestrator_v2.planning_engine - DEBUG - Step step_4: extract_key_phrases with condition ConditionType.ON_SUCCESS
2025-08-04 13:49:50,595 - orchestrator_v2.planning_engine - DEBUG - Step step_5: synthesize_content with condition ConditionType.ON_SUCCESS
2025-08-04 13:49:50,595 - orchestrator_v2.orchestrator_v2 - INFO - üìã Created plan with 5 steps
2025-08-04 13:49:50,595 - orchestrator_v2.orchestrator_v2 - INFO - ‚ö° Starting plan execution...
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Starting execution of plan: plan_1754329790
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Executing step: step_1 (discover_document_structure)
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Executing step: step_2 (discover_document_structure)
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Step 'step_1' completed successfully
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Step 'step_2' completed successfully
2025-08-04 13:49:50,595 - orchestrator_v2.execution_engine - INFO - Executing step: step_3 (search_multiple_docs)
2025-08-04 13:49:50,597 - orchestrator_v2.execution_engine - INFO - Step 'step_3' completed successfully
2025-08-04 13:49:50,597 - orchestrator_v2.execution_engine - INFO - Executing step: step_4 (extract_key_phrases)
2025-08-04 13:49:50,597 - orchestrator_v2.execution_engine - INFO - Step 'step_4' completed successfully
2025-08-04 13:49:50,598 - orchestrator_v2.execution_engine - INFO - Executing step: step_5 (synthesize_content)
2025-08-04 13:49:50,598 - tools.synthesis_tools - INFO - Synthesizing summary for query: 'What are the main topics and content of these documents?' from 2 documents
2025-08-04 13:49:50,599 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-7eb83d18-4ca7-4467-bb9f-fb97cb97fbbe', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'Please provide a comprehensive summary based on the following documents and query.\n\nQuery: What are the main topics and content of these documents?\n\nDocuments:\n\n\nYou are comparing 2 separate documents:\n1. 1\n2. 2\n\n=== 1 ===\nriskandfinace.pdf\n=== 2 ===\n20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf\n\nPlease synthesize the information to answer the query with:\n1. A clear, direct answer to the query\n2. Supporting evidence from the documents\n3. Key insights and patterns\n4. Any limitations or gaps in the information\n\nSynthesis:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:49:50,599 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:49:50,600 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:49:50,600 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:49:50,600 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:49:50,600 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:49:50,600 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:49:54,274 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:49:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:49:51Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:49:54Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:49:50Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:49:51Z'), (b'request-id', b'req_011CRo6JZz9HnvpFFyVpSMbt'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe4c7dbd036c5-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:49:54,275 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:49:54,275 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:49:54,275 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:49:54,275 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:49:54,275 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:49:54,275 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:49:54 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:49:51Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:49:54Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:49:50Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:49:51Z', 'request-id': 'req_011CRo6JZz9HnvpFFyVpSMbt', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe4c7dbd036c5-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:49:54,275 - anthropic._base_client - DEBUG - request_id: req_011CRo6JZz9HnvpFFyVpSMbt
2025-08-04 13:49:54,276 - tools.synthesis_tools - INFO - Successfully synthesized summary for query 'What are the main topics and content of these documents?'
2025-08-04 13:49:54,276 - orchestrator_v2.execution_engine - INFO - Step 'step_5' completed successfully
2025-08-04 13:49:54,276 - orchestrator_v2.execution_engine - INFO - Plan execution completed. Success: 5, Failed: 0
2025-08-04 13:49:54,276 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-9c8c00e1-faca-416e-ab00-8ce3185b82a6', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "what do these documents contain"\n\nI have gathered the following information using multiple analysis tools:\n\n## Analysis 1 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 2 (discover_document_structure, confidence: 0.95):\n{\'status\': \'success\', \'headers\': []}...\n\n## Analysis 3 (search_multiple_docs, confidence: 0.95):\n[{\'page_content\': "## Page 1  \\nBanks/BHC/T&L   Overview of risk -based capital requirements\\nOctober 2023   Chapter 1 - Page 1\\nGuideline  \\nSubject:  Capital Adequacy Requirements (CAR)  \\nChapter 1 ‚Äì Overview of risk -based capital requirements  \\nEffective Date: November 2023 / January 2024  Note:  For institutions with a fiscal year ending October 31 or December 31, respectively.\\nSubsections 485(1) and 949(1) of the Bank Act  (BA), subsection 473(1) of the Trust and Loan\\nCompanies Act  (TLCA) require banks (including federal credit unions), bank holding companies,\\nfederally regulated trust companies, and federally reg ulated loan companies to maintain adequate\\ncapital. The CAR Guideline is not made pursuant to subsections 485(2) or 949(2) of the BA, or to subsection 473(2) of the TLCA. However, the capital standards set out in this guideline together with the leverage r equirements set out in the Leverage Requirements Guideline provide\\nthe framework within which the Superinte...\n\n## Analysis 4 (extract_key_phrases, confidence: 0.95):\n{\'status\': \'success\', \'top_words\': {\'step_3_output\': 1}, \'top_bigrams\': {}, \'top_trigrams\': {}, \'total_unique_words\': 1, \'total_unique_bigrams\': 0, \'total_unique_trigrams\': 0}...\n\n## Analysis 5 (synthesize_content, confidence: 0.95):\n{\'success\': True, \'synthesis_type\': \'summary\', \'query\': \'What are the main topics and content of these documents?\', \'result\': \'I apologize, but I don\\\'t see the actual content of the documents you\\\'re referencing - I only see the filenames "riskandfinance.pdf" and "20250801_231927_e702b3a7-5cbd-4557-b46b-9d352384f3ac_car24_chpt1_0.pdf" without their contents. Without access to the actual content of these documents, I cannot:\\n\\n1. Provide a meaningful summary of their main topics\\n2. Extract supporting evidence\\n3. Identify key insights and patterns\\n4. Point out limitations or gaps\\n\\nTo provide a comprehensive synthesis, I would need:\\n- The actual text/content of both documents\\n- Any relevant context about these documents\\n- Specific sections or passages you\\\'d like me to analyze\\n\\nWould you be able to share the content of these documents so I can better assist you with your query?\', \'documents_processed\': 2, \'content_length\': 757, \'processing_details\': {\'model_used\': \'claude-3-5-...\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information.\n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-04 13:49:54,277 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-04 13:49:54,277 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-04 13:49:54,277 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-04 13:49:54,277 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-04 13:49:54,277 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-04 13:49:54,277 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-04 13:49:59,391 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Mon, 04 Aug 2025 17:49:59 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-04T17:49:55Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-04T17:49:59Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-04T17:49:54Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-04T17:49:55Z'), (b'request-id', b'req_011CRo6JqhTRYegKzAn61TfL'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'969fe4dec9f636c5-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-04 13:49:59,392 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-04 13:49:59,393 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-04 13:49:59,393 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-04 13:49:59,393 - httpcore.http11 - DEBUG - response_closed.started
2025-08-04 13:49:59,394 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-04 13:49:59,394 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Mon, 04 Aug 2025 17:49:59 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-04T17:49:55Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-04T17:49:59Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-04T17:49:54Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-04T17:49:55Z', 'request-id': 'req_011CRo6JqhTRYegKzAn61TfL', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '969fe4dec9f636c5-YYZ', 'content-encoding': 'gzip'})
2025-08-04 13:49:59,394 - anthropic._base_client - DEBUG - request_id: req_011CRo6JqhTRYegKzAn61TfL
2025-08-04 13:49:59,395 - orchestrator_v2.state_management - DEBUG - Cleaned up execution state for: 8e3caae3-7e7e-45ad-8bc1-75c32d540d8f
2025-08-04 13:49:59,395 - orchestrator_v2.orchestrator_v2 - INFO - ‚úÖ Execution completed with 0.95 confidence
2025-08-04 13:49:59,395 - orchestrator_integration - INFO - ‚úÖ Orchestrator 2.0 completed with 0.95 confidence
2025-08-04 13:49:59,396 - __main__ - INFO - Added assistant response to memory - length: 1245
2025-08-04 13:49:59,396 - __main__ - INFO - Chat response generated - session: terminal-test-session, processing_time: 17800ms, correlation_id: 9712358b-1930-457c-8d71-78cf22c100c9
INFO:     127.0.0.1:53631 - "POST /chat HTTP/1.1" 200 OK
INFO:     127.0.0.1:54269 - "GET /system/orchestrator HTTP/1.1" 200 OK
INFO:     Shutting down
INFO:     Waiting for background tasks to complete. (CTRL+C to force quit)
