2025-08-01 16:37:08,181 - asyncio - DEBUG - Using selector: KqueueSelector
INFO:     Started server process [30508]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_part_begin with no data
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_field with data[36:55]
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_value with data[57:107]
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_field with data[109:121]
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_value with data[123:131]
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_headers_finished with no data
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_part_data with data[135:1042]
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_part_end with no data
2025-08-01 16:37:14,282 - python_multipart.multipart - DEBUG - Calling on_end with no data
2025-08-01 16:37:14,390 - __main__ - INFO - File upload request - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, file: sample_data.csv, correlation_id: 3dabcaaf-b2ad-4ab8-b455-5a53c1c20bdc
2025-08-01 16:37:14,629 - __main__ - INFO - Document processing result - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, result: {'status': 'success', 'doc_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunks_created': 3}, correlation_id: 3dabcaaf-b2ad-4ab8-b455-5a53c1c20bdc
2025-08-01 16:37:14,629 - __main__ - INFO - File uploaded and processed - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, chunks: 3, stored_as: 6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv, correlation_id: 3dabcaaf-b2ad-4ab8-b455-5a53c1c20bdc
INFO:     127.0.0.1:52667 - "POST /upload?session_id=single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e HTTP/1.1" 200 OK
2025-08-01 16:37:14,849 - tools.synthesis_tools - INFO - Synthesis LLM initialized successfully with model: claude-3-5-sonnet-20241022
2025-08-01 16:37:14,924 - matplotlib - DEBUG - matplotlib data path: /Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data
2025-08-01 16:37:14,927 - matplotlib - DEBUG - CONFIGDIR=/Users/saadahmed/.matplotlib
2025-08-01 16:37:14,927 - matplotlib - DEBUG - interactive is False
2025-08-01 16:37:14,927 - matplotlib - DEBUG - platform is darwin
2025-08-01 16:37:14,959 - matplotlib - DEBUG - CACHEDIR=/Users/saadahmed/.matplotlib
2025-08-01 16:37:14,960 - matplotlib.font_manager - DEBUG - Using fontManager instance from /Users/saadahmed/.matplotlib/fontlist-v390.json
2025-08-01 16:37:15,084 - __main__ - INFO - Frontend Chat request - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, query: Summarize the employee data in this CSV., correlation_id: 73078b04-eee9-49c3-a040-d60f3cb80ab4
2025-08-01 16:37:15,085 - __main__ - INFO - Loaded memory context - short_term: 6, summaries: 3
2025-08-01 16:37:15,085 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:37:15,112 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c2344e64-3e99-42bf-a2e2-e963d0cd2638', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\']\n- User Query: \'Summarize the employee data in this CSV.\'\n- ACTIVE DOCUMENT: \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🔹 USER QUERY 1: Based on your previous response, how many departments are there?\n\n🤖 ASSISTANT RESPONSE 2: None\n\n🤖 ASSISTANT RESPONSE 3: None\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "Summarize the employee data in this CSV."\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:37:15,113 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:37:15,116 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:37:15,133 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x11739a510>
2025-08-01 16:37:15,133 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:37:15,153 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x117057610>
2025-08-01 16:37:15,153 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:37:15,154 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:37:15,154 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:37:15,154 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:37:15,154 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:37:20,722 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:37:20 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:37:17Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:37:21Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:37:15Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:37:17Z'), (b'request-id', b'req_011CRhdeFDBTpe4HKCoPsHj1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968821e1dd25ab96-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:37:20,722 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:37:20,722 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:37:20,723 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:37:20,723 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:37:20,723 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:37:20,723 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:37:20 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:37:17Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:37:21Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:37:15Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:37:17Z', 'request-id': 'req_011CRhdeFDBTpe4HKCoPsHj1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968821e1dd25ab96-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:37:20,723 - anthropic._base_client - DEBUG - request_id: req_011CRhdeFDBTpe4HKCoPsHj1
2025-08-01 16:37:20,732 - tools.synthesis_tools - ERROR - Invalid input type for synthesize_content: expected list, got <class 'dict'>
2025-08-01 16:37:20,733 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c3a311e4-55f2-4bd0-a148-65664e601edc', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "Summarize the employee data in this CSV."\n\nI have gathered the following information using multiple analysis tools:\n\n📄 DOCUMENT SUMMARY:\nError: synthesize_content requires a list of document chunks, but received dict.\n\n📊 DOCUMENT CONTENT (3 sections):\nSection 1: # CSV Data: 6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\nSection 2: Employee_ID              Name Department  Salary Risk_Level  Performance_Score  Years_Experience\n        1001        John Smith    Finance   65000        Low                 85                 5\n        1002     Sarah Johnson  Marketing   58000     Medium                 92                 3\n        1003     Michael Brown         IT   72000        Low                 88                 7\n        1004       Emily Davis         HR   55000       High                 78                 2\n        100\nSection 3: 1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3\n        1015     Andrew Harris         IT   74000        Low                 85                 7\n        1016   Stephanie Clark         HR   58000       High                 90                 4\n        1017        Ryan Lewis    Finance   69000     Medium                 86                 8\n        1018 Miche\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'success\', \'operation\': \'summary\', \'data\': {\'shape\': (22, 7), \'columns\': [\'Employee_ID\', \'Name\', \'Department\', \'Salary\', \'Risk_Level\', \'Performance_Score\', \'Years_Experience\'], \'dtypes\': {\'Employee_ID\': \'object\', \'Name\': \'object\', \'Department\': \'object\', \'Salary\': \'int64\', \'Risk_Level\': \'object\', \'Performance_Score\': \'int64\', \'Years_Experience\': \'int64\'}, \'numeric_summary\': {\'Salary\': {\'count\': 22.0, \'mean\': 64545.454545454544, \'std\': 6822.422923379534, \'min\': 55000.0, \'25%\': 58250.0, \'50%\': 63500.0, \'75%\': 69750.0, \'max\': 76000.0}, \'Performance_Score\': {\'count\': 22.0, \'mean\': 86.77272727272727, \'std\': 4.0933374226187675, \'min\': 78.0, \'25%\': 84.25, \'50%\': 87.0, \'75%\': 89.75, \'max\': 94.0}, \'Years_Experience\': {\'count\': 22.0, \'mean\': 5.045454545454546, \'std\': 2.192569111193375, \'min\': 2.0, \'25%\': 3.0, \'50%\': 5.0, \'75%\': 6.75, \'max\': 9.0}}}}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:37:20,733 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:37:20,733 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:37:20,733 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:37:20,733 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:37:20,733 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:37:20,733 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:37:26,310 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:37:26 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:37:21Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:37:26Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:37:20Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:37:21Z'), (b'request-id', b'req_011CRhdef4tJ5SAVXtpqFZwG'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882204baa5ab96-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:37:26,311 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:37:26,311 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:37:26,311 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:37:26,311 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:37:26,311 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:37:26,312 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:37:26 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:37:21Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:37:26Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:37:20Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:37:21Z', 'request-id': 'req_011CRhdef4tJ5SAVXtpqFZwG', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882204baa5ab96-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:37:26,312 - anthropic._base_client - DEBUG - request_id: req_011CRhdef4tJ5SAVXtpqFZwG
2025-08-01 16:37:26,314 - __main__ - INFO - Added assistant response to memory - length: 1140
2025-08-01 16:37:26,315 - __main__ - INFO - Chat response generated - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, processing_time: 11229ms, correlation_id: 73078b04-eee9-49c3-a040-d60f3cb80ab4

--- 🚀 Orchestrator Starting for Session single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 6 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: 6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 0}}, {'page_content': 'Employee_ID              Name Department  Salary Risk_Level  Performance_Score  Years_Experience\n        1001        John Smith    Finance   65000        Low                 85                 5\n        1002     Sarah Johnson  Marketing   58000     Medium                 92                 3\n        1003     Michael Brown         IT   72000        Low                 88                 7\n        1004       Emily Davis         HR   55000       High                 78                 2\n        1005      David Wilson    Finance   68000     Medium                 90                 6\n        1006       Lisa Miller  Marketing   62000        Low                 86                 4\n        1007      Robert Jones         IT   75000       High                 83                 8\n        1008   Jennifer Garcia         HR   57000     Medium                 89                 3\n        1009   Christopher Lee    Finance   70000        Low                 94                 9\n        1010   Amanda Martinez  Marketing   59000       High                 81                 2\n        1011  Matthew Anderson         IT   73000     Medium                 87                 6\n        1012    Jessica Taylor         HR   56000        Low                 91                 4\n        1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 1}}, {'page_content': '1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3\n        1015     Andrew Harris         IT   74000        Low                 85                 7\n        1016   Stephanie Clark         HR   58000       High                 90                 4\n        1017        Ryan Lewis    Finance   69000     Medium                 86                 8\n        1018 Michelle Robinson  Marketing   60000        Low                 93                 5\n        1019      Kevin Walker         IT   76000       High                 84                 9\n        1020       Nicole Hall         HR   57000     Medium                 87                 3', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 2}}], 'operation': 'summary'})
    📎 Tool-specific fix: PREVIOUS_STEP_OUTPUT → table processing results for synthesis
  Executing Step 3: synthesize_content({'chunks': {'status': 'success', 'operation': 'summary', 'data': {'shape': (22, 7), 'columns': ['Employee_ID', 'Name', 'Department', 'Salary', 'Risk_Level', 'Performance_Score', 'Years_Experience'], 'dtypes': {'Employee_ID': 'object', 'Name': 'object', 'Department': 'object', 'Salary': 'int64', 'Risk_Level': 'object', 'Performance_Score': 'int64', 'Years_Experience': 'int64'}, 'numeric_summary': {'Salary': {'count': 22.0, 'mean': 64545.454545454544, 'std': 6822.422923379534, 'min': 55000.0, '25%': 58250.0, '50%': 63500.0, '75%': 69750.0, 'max': 76000.0}, 'Performance_Score': {'count': 22.0, 'mean': 86.77272727272727, 'std': 4.0933374226187675, 'min': 78.0, '25%': 84.25, '50%': 87.0, '75%': 89.75, 'max': 94.0}, 'Years_Experience': {'count': 22.0, 'mean': 5.045454545454546, 'std': 2.192569111193375, 'min': 2.0, '25%': 3.0, '50%': 5.0, '75%': 6.75, 'max': 9.0}}}}, 'method': 'simple_llm_call', 'length': 'two paragraphs'})
INFO:     127.0.0.1:52672 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:37:26,320 - __main__ - INFO - Frontend Chat request - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, query: Based on your previous response, how many departments are there?, correlation_id: 11a9abe5-a3fc-47fe-929e-da4a152c78b0
2025-08-01 16:37:26,321 - __main__ - INFO - Loaded memory context - short_term: 8, summaries: 3
2025-08-01 16:37:26,322 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:37:26,324 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-c312c551-3df5-4256-9454-600d28c24cc7', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\']\n- User Query: \'Based on your previous response, how many departments are there?\'\n- ACTIVE DOCUMENT: \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🤖 ASSISTANT RESPONSE 1: None\n\n🔹 USER QUERY 2: Summarize the employee data in this CSV.\n\n🤖 ASSISTANT RESPONSE 3: Here\'s a comprehensive summary of the employee data:\n\nThe dataset contains information for 22 employees across multiple departments with the following key insights:\n\nDepartmental Structure:\n- Employees are distributed across 4 departments: Finance, Marketing, IT, and HR\n- Each employee has a unique ...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "Based on your previous response, how many departments are there?"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:37:26,326 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:37:26,326 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:37:26,326 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:37:26,327 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:37:26,327 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:37:26,327 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:37:31,471 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:37:31 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'Content-Encoding', b'gzip'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:37:29Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:37:31Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:37:26Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:37:29Z'), (b'request-id', b'req_011CRhdf54GXqUTABedYEJxf'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882227a863ab96-YYZ')])
2025-08-01 16:37:31,472 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:37:31,473 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:37:31,473 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:37:31,473 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:37:31,474 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:37:31,474 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:37:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'content-encoding': 'gzip', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:37:29Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:37:31Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:37:26Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:37:29Z', 'request-id': 'req_011CRhdf54GXqUTABedYEJxf', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882227a863ab96-YYZ'})
2025-08-01 16:37:31,474 - anthropic._base_client - DEBUG - request_id: req_011CRhdf54GXqUTABedYEJxf
2025-08-01 16:37:31,479 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-5519d88f-5219-4675-9d91-1ce75d2d48b6', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "Based on your previous response, how many departments are there?"\n\nI have gathered the following information using multiple analysis tools:\n\n📊 DOCUMENT CONTENT (3 sections):\nSection 1: # CSV Data: 6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\nSection 2: Employee_ID              Name Department  Salary Risk_Level  Performance_Score  Years_Experience\n        1001        John Smith    Finance   65000        Low                 85                 5\n        1002     Sarah Johnson  Marketing   58000     Medium                 92                 3\n        1003     Michael Brown         IT   72000        Low                 88                 7\n        1004       Emily Davis         HR   55000       High                 78                 2\n        100\nSection 3: 1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3\n        1015     Andrew Harris         IT   74000        Low                 85                 7\n        1016   Stephanie Clark         HR   58000       High                 90                 4\n        1017        Ryan Lewis    Finance   69000     Medium                 86                 8\n        1018 Miche\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'error\', \'operation\': \'unique_values\', \'error\': \'Unknown operation: unique_values\'}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:37:31,479 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:37:31,480 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:37:31,480 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:37:31,480 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:37:31,481 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:37:31,481 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:37:33,724 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:37:33 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:37:32Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:37:33Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:37:31Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:37:32Z'), (b'request-id', b'req_011CRhdfSwQPkSuSTsDUqt88'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882247de58ab96-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:37:33,725 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:37:33,726 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:37:33,865 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:37:33,866 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:37:33,866 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:37:33,866 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:37:33 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:37:32Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:37:33Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:37:31Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:37:32Z', 'request-id': 'req_011CRhdfSwQPkSuSTsDUqt88', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882247de58ab96-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:37:33,867 - anthropic._base_client - DEBUG - request_id: req_011CRhdfSwQPkSuSTsDUqt88
2025-08-01 16:37:33,869 - __main__ - INFO - Added assistant response to memory - length: 490
2025-08-01 16:37:33,869 - __main__ - INFO - Chat response generated - session: single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e, processing_time: 7547ms, correlation_id: 11a9abe5-a3fc-47fe-929e-da4a152c78b0

--- 🚀 Orchestrator Starting for Session single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 8 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: 6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 0}}, {'page_content': 'Employee_ID              Name Department  Salary Risk_Level  Performance_Score  Years_Experience\n        1001        John Smith    Finance   65000        Low                 85                 5\n        1002     Sarah Johnson  Marketing   58000     Medium                 92                 3\n        1003     Michael Brown         IT   72000        Low                 88                 7\n        1004       Emily Davis         HR   55000       High                 78                 2\n        1005      David Wilson    Finance   68000     Medium                 90                 6\n        1006       Lisa Miller  Marketing   62000        Low                 86                 4\n        1007      Robert Jones         IT   75000       High                 83                 8\n        1008   Jennifer Garcia         HR   57000     Medium                 89                 3\n        1009   Christopher Lee    Finance   70000        Low                 94                 9\n        1010   Amanda Martinez  Marketing   59000       High                 81                 2\n        1011  Matthew Anderson         IT   73000     Medium                 87                 6\n        1012    Jessica Taylor         HR   56000        Low                 91                 4\n        1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 1}}, {'page_content': '1013     Daniel Thomas    Finance   67000       High                 82                 5\n        1014      Ashley White  Marketing   61000     Medium                 88                 3\n        1015     Andrew Harris         IT   74000        Low                 85                 7\n        1016   Stephanie Clark         HR   58000       High                 90                 4\n        1017        Ryan Lewis    Finance   69000     Medium                 86                 8\n        1018 Michelle Robinson  Marketing   60000        Low                 93                 5\n        1019      Kevin Walker         IT   76000       High                 84                 9\n        1020       Nicole Hall         HR   57000     Medium                 87                 3', 'metadata': {'source': 'uploads/single_test_session_8c9eb5d7-1493-40eb-8d99-92ac1452199e/6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'file_type': 'CSV', 'file_name': '6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv', 'chunk_index': 2}}], 'operation': 'unique_values', 'column': 'Department'})
INFO:     127.0.0.1:52730 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:38:57,859 - python_multipart.multipart - DEBUG - Calling on_part_begin with no data
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_field with data[42:61]
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_value with data[63:120]
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_field with data[122:134]
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_value with data[136:144]
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_headers_finished with no data
2025-08-01 16:38:57,860 - python_multipart.multipart - DEBUG - Calling on_part_data with data[148:611]
2025-08-01 16:38:57,861 - python_multipart.multipart - DEBUG - Calling on_part_end with no data
2025-08-01 16:38:57,861 - python_multipart.multipart - DEBUG - Calling on_end with no data
2025-08-01 16:38:57,861 - __main__ - INFO - File upload request - session: session_1754080727182_yxi2k6qz1, file: test_business_data.csv, correlation_id: d26167d9-8630-425b-8b76-26098a724ac0
2025-08-01 16:38:57,877 - __main__ - INFO - Document processing result - session: session_1754080727182_yxi2k6qz1, result: {'status': 'success', 'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'chunks_created': 1}, correlation_id: d26167d9-8630-425b-8b76-26098a724ac0
2025-08-01 16:38:57,877 - __main__ - INFO - File uploaded and processed - session: session_1754080727182_yxi2k6qz1, chunks: 1, stored_as: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv, correlation_id: d26167d9-8630-425b-8b76-26098a724ac0
INFO:     127.0.0.1:53247 - "POST /upload?session_id=session_1754080727182_yxi2k6qz1 HTTP/1.1" 200 OK
INFO:     127.0.0.1:53247 - "OPTIONS /chat HTTP/1.1" 200 OK
2025-08-01 16:39:02,813 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: summarise the results, correlation_id: d3eea7cb-c93b-4f8e-8860-0abcb74bd00e
2025-08-01 16:39:02,815 - __main__ - INFO - Loaded memory context - short_term: 10, summaries: 3
2025-08-01 16:39:02,818 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:39:02,820 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-22d39228-f56e-4d88-819a-75f11cf01c92', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'summarise the results\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🤖 ASSISTANT RESPONSE 1: Here\'s a comprehensive summary of the employee data:\n\nThe dataset contains information for 22 employees across multiple departments with the following key insights:\n\nDepartmental Structure:\n- Employees are distributed across 4 departments: Finance, Marketing, IT, and HR\n- Each employee has a unique ...\n\n🔹 USER QUERY 2: Based on your previous response, how many departments are there?\n\n🤖 ASSISTANT RESPONSE 3: Based on the data shown, there are 4 distinct departments:\n1. Finance\n2. Marketing\n3. IT\n4. HR\n\nThis can be observed from the Department column in the employee data, where each employee is assigned to one of these four departments. The data shows multiple employees in each department - for example, ...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "summarise the results"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:02,821 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:02,822 - httpcore.connection - DEBUG - close.started
2025-08-01 16:39:02,822 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:39:02,822 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:39:02,837 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1173c5f90>
2025-08-01 16:39:02,837 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:39:02,856 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1174110f0>
2025-08-01 16:39:02,857 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:02,857 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:02,857 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:02,857 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:02,858 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:11,243 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:11 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:05Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:11Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:02Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:05Z'), (b'request-id', b'req_011CRhdnBi4tov5GDFuEHU6u'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882482f93f36da-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:11,244 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:11,244 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:11,245 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:11,245 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:11,245 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:11,245 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:11 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:05Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:11Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:02Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:05Z', 'request-id': 'req_011CRhdnBi4tov5GDFuEHU6u', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882482f93f36da-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:11,246 - anthropic._base_client - DEBUG - request_id: req_011CRhdnBi4tov5GDFuEHU6u
2025-08-01 16:39:11,248 - tools.synthesis_tools - ERROR - Invalid input type for synthesize_content: expected list, got <class 'dict'>
2025-08-01 16:39:11,249 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-469b97de-c0de-4b5b-9c35-1c9fa1a276ea', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "summarise the results"\n\nI have gathered the following information using multiple analysis tools:\n\n📄 DOCUMENT SUMMARY:\nError: synthesize_content requires a list of document chunks, but received dict.\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'success\', \'operation\': \'summary\', \'data\': {\'message\': \'CSV data processed from document chunks\', \'content_summary\': \'Found 1 chunks with CSV content\', \'sample_content\': \'\'}}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:11,249 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:11,250 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:11,250 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:11,250 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:11,251 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:11,251 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:17,152 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:11Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:17Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:11Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:11Z'), (b'request-id', b'req_011CRhdnoVNG9cpZYCFJ9d2Y'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968824b76c5236da-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:17,153 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:17,153 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:17,154 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:17,154 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:17,154 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:17,154 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:11Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:17Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:11Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:11Z', 'request-id': 'req_011CRhdnoVNG9cpZYCFJ9d2Y', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968824b76c5236da-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:17,155 - anthropic._base_client - DEBUG - request_id: req_011CRhdnoVNG9cpZYCFJ9d2Y
2025-08-01 16:39:17,158 - __main__ - INFO - Added assistant response to memory - length: 1278
2025-08-01 16:39:17,158 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 14343ms, correlation_id: d3eea7cb-c93b-4f8e-8860-0abcb74bd00e

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 10 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%', 'metadata': {'source': 'uploads/session_1754080727182_yxi2k6qz1/e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'file_type': 'CSV', 'file_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'chunk_index': 0}}], 'operation': 'summary'})
    📎 Tool-specific fix: PREVIOUS_STEP_OUTPUT → table processing results for synthesis
  Executing Step 3: synthesize_content({'chunks': {'status': 'success', 'operation': 'summary', 'data': {'message': 'CSV data processed from document chunks', 'content_summary': 'Found 1 chunks with CSV content', 'sample_content': ''}}, 'method': 'refine', 'length': 'two paragraphs', 'tone': 'analytical'})
INFO:     127.0.0.1:53247 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:39:27,344 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: how many banking depts, correlation_id: 73c7a9ac-6187-40b5-b0ee-ec1f4ecaa6cb
2025-08-01 16:39:27,345 - __main__ - INFO - Loaded memory context - short_term: 7, summaries: 3
2025-08-01 16:39:27,347 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:39:27,348 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-cb02777b-15d8-4820-89fd-2cce25a798f2', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'how many banking depts\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🔹 USER QUERY 1: summarise the results\n\n🔹 USER QUERY 2: summarise the results\n\n🤖 ASSISTANT RESPONSE 3: Here\'s a summary of the key results from the business data analysis:\n\nThe data shows performance metrics across 5 key banking departments:\n\nKey Findings:\n- Investment Banking leads in profitability with $54.4M profit and the highest growth rate (22.1%)\n- Personal Banking has the largest workforce (1...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "how many banking depts"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:27,349 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:27,351 - httpcore.connection - DEBUG - close.started
2025-08-01 16:39:27,351 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:39:27,351 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:39:27,368 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x11709b950>
2025-08-01 16:39:27,368 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:39:27,388 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x114974170>
2025-08-01 16:39:27,388 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:27,388 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:27,389 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:27,389 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:27,389 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:33,026 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:32 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:30Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:33Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:27Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:30Z'), (b'request-id', b'req_011CRhdozb8qenRb8umjysKW'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9688251c4944543d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:33,027 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:33,027 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:33,027 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:33,028 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:33,028 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:33,028 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:32 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:30Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:33Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:27Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:30Z', 'request-id': 'req_011CRhdozb8qenRb8umjysKW', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9688251c4944543d-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:33,028 - anthropic._base_client - DEBUG - request_id: req_011CRhdozb8qenRb8umjysKW
2025-08-01 16:39:33,032 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-81db0cea-354f-4902-8bbf-d165fb1d333e', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "how many banking depts"\n\nI have gathered the following information using multiple analysis tools:\n\n🔑 KEY TOPICS: 2 (7), 5 (6), 0 (6), 3 (5), 8 (5), 4 (5), 1 (4), banking (3)\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'error\', \'error\': "Invalid input: expected table data (list), got placeholder string \'EXTRACT_TABLE_FROM_STEP_1\'", \'operation\': \'unique_values\'}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:33,033 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:33,034 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:33,034 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:33,034 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:33,035 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:33,035 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:35,892 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:35 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:33Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:36Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:33Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:33Z'), (b'request-id', b'req_011CRhdpQgE7DeTPggqGfzzN'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9688253f9eab543d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:35,892 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:35,892 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:35,892 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:35,892 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:35,893 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:35,893 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:35 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:33Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:36Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:33Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:33Z', 'request-id': 'req_011CRhdpQgE7DeTPggqGfzzN', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9688253f9eab543d-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:35,893 - anthropic._base_client - DEBUG - request_id: req_011CRhdpQgE7DeTPggqGfzzN
2025-08-01 16:39:35,894 - __main__ - INFO - Added assistant response to memory - length: 617
2025-08-01 16:39:35,894 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 8548ms, correlation_id: 73c7a9ac-6187-40b5-b0ee-ec1f4ecaa6cb

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 7 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
    📎 Text extraction: EXTRACT_PAGE_CONTENT_FROM_STEP_1 → page content for text analysis
  Executing Step 2: extract_key_phrases({'text': '# CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%', 'top_n': 10, 'min_length': 1})
  Executing Step 3: process_table_data({'table_data': 'EXTRACT_TABLE_FROM_STEP_1', 'operation': 'unique_values', 'column': 'Department'})
INFO:     127.0.0.1:53367 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:39:47,860 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: how many employees in each, correlation_id: aed0728a-5723-4e50-9d55-9dc8faddf14a
2025-08-01 16:39:47,861 - __main__ - INFO - Loaded memory context - short_term: 9, summaries: 3
2025-08-01 16:39:47,862 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:39:47,864 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-226dba7b-55ac-459b-b702-c413f8bcd1ea', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'how many employees in each\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🤖 ASSISTANT RESPONSE 1: Here\'s a summary of the key results from the business data analysis:\n\nThe data shows performance metrics across 5 key banking departments:\n\nKey Findings:\n- Investment Banking leads in profitability with $54.4M profit and the highest growth rate (22.1%)\n- Personal Banking has the largest workforce (1...\n\n🔹 USER QUERY 2: how many banking depts\n\n🤖 ASSISTANT RESPONSE 3: Based on the CSV data shown, there are 5 banking/financial departments:\n\n1. Corporate Banking\n2. Personal Banking \n3. Wealth Management\n4. Investment Banking\n5. Digital Services\n\nEach department has different staffing levels and financial metrics, with Personal Banking being the largest department (...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "how many employees in each"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:47,865 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:47,865 - httpcore.connection - DEBUG - close.started
2025-08-01 16:39:47,866 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:39:47,866 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:39:47,879 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x117410380>
2025-08-01 16:39:47,879 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:39:47,901 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1174105a0>
2025-08-01 16:39:47,902 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:47,902 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:47,902 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:47,903 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:47,903 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:53,610 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:53 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:50Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:54Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:48Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:50Z'), (b'request-id', b'req_011CRhdqWJLyPvxfRKHyGwxB'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9688259c884bab6d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:53,610 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:53,610 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:53,611 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:53,611 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:53,611 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:53,611 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:53 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:50Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:54Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:48Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:50Z', 'request-id': 'req_011CRhdqWJLyPvxfRKHyGwxB', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9688259c884bab6d-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:53,611 - anthropic._base_client - DEBUG - request_id: req_011CRhdqWJLyPvxfRKHyGwxB
2025-08-01 16:39:53,626 - matplotlib.pyplot - DEBUG - Loaded backend macosx version unknown.
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 5.05
2025-08-01 16:39:53,729 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 5.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,730 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,731 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,732 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,733 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,734 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,735 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:39:53,736 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to Arial ('/System/Library/Fonts/Supplemental/Arial.ttf') with score of 0.050000.
2025-08-01 16:39:53,739 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-7c476b0a-d9de-41a8-9fcf-1c21cf862c7f', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "how many employees in each"\n\nI have gathered the following information using multiple analysis tools:\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'success\', \'operation\': \'summary\', \'data\': {\'message\': \'CSV data processed from document chunks\', \'content_summary\': \'Found 1 chunks with CSV content\', \'sample_content\': \'\'}}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:39:53,740 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:39:53,740 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:39:53,740 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:39:53,740 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:39:53,740 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:39:53,740 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:39:56,682 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:39:56 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:39:54Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:39:56Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:39:53Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:39:54Z'), (b'request-id', b'req_011CRhdqwEHMbfLvbZapj8Rt'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968825c0fbdbab6d-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:39:56,683 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:39:56,683 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:39:56,684 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:39:56,684 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:39:56,685 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:39:56,685 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:39:56 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:39:54Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:39:56Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:39:53Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:39:54Z', 'request-id': 'req_011CRhdqwEHMbfLvbZapj8Rt', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968825c0fbdbab6d-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:39:56,685 - anthropic._base_client - DEBUG - request_id: req_011CRhdqwEHMbfLvbZapj8Rt
2025-08-01 16:39:56,691 - __main__ - INFO - Added assistant response to memory - length: 643
2025-08-01 16:39:56,691 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 8826ms, correlation_id: aed0728a-5723-4e50-9d55-9dc8faddf14a

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 9 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%', 'metadata': {'source': 'uploads/session_1754080727182_yxi2k6qz1/e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'file_type': 'CSV', 'file_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'chunk_index': 0}}], 'operation': 'summary', 'groupby': 'Department', 'metrics': ['Employees']})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 3: create_chart({'data': {'status': 'success', 'operation': 'summary', 'data': {'message': 'CSV data processed from document chunks', 'content_summary': 'Found 1 chunks with CSV content', 'sample_content': ''}}, 'chart_type': 'bar', 'title': 'Employee Count by Department', 'x': 'Department', 'y': 'Employees'})
INFO:     127.0.0.1:53457 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:40:15,988 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: reveniw breakdown by dept, correlation_id: b0acf29a-4e91-4e76-893d-4ab607e9690a
2025-08-01 16:40:15,989 - __main__ - INFO - Loaded memory context - short_term: 6, summaries: 3
2025-08-01 16:40:15,990 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:40:15,992 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-3045ad0e-0471-4e6b-977d-b4b92932f6c2', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'reveniw breakdown by dept\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🔹 USER QUERY 1: how many employees in each\n\n🤖 ASSISTANT RESPONSE 2: Here is the breakdown of employees in each department:\n\n• Personal Banking: 1,200 employees\n• Corporate Banking: 450 employees \n• Digital Services: 350 employees\n• Wealth Management: 280 employees\n• Investment Banking: 180 employees\n\nPersonal Banking is clearly the largest department with 1,200 empl...\n\n🤖 ASSISTANT RESPONSE 3: Here is the breakdown of employees in each department:\n\n• Personal Banking: 1,200 employees\n• Corporate Banking: 450 employees \n• Digital Services: 350 employees\n• Wealth Management: 280 employees\n• Investment Banking: 180 employees\n\nPersonal Banking is clearly the largest department with 1,200 empl...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "reveniw breakdown by dept"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:40:15,993 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:40:15,993 - httpcore.connection - DEBUG - close.started
2025-08-01 16:40:15,993 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:40:15,993 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:40:16,009 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1173c3750>
2025-08-01 16:40:16,009 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:40:16,029 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1173c3650>
2025-08-01 16:40:16,030 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:40:16,030 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:40:16,030 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:40:16,030 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:40:16,030 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:40:22,292 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:40:22 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:40:18Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:40:22Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:40:16Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:40:18Z'), (b'request-id', b'req_011CRhdsaXPwPg36u5fVw5Te'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9688264c4d30ac6f-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:40:22,293 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:40:22,293 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:40:22,302 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:40:22,303 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:40:22,303 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:40:22,303 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:40:22 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:40:18Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:40:22Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:40:16Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:40:18Z', 'request-id': 'req_011CRhdsaXPwPg36u5fVw5Te', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9688264c4d30ac6f-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:40:22,303 - anthropic._base_client - DEBUG - request_id: req_011CRhdsaXPwPg36u5fVw5Te
2025-08-01 16:40:22,339 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-8117a0c6-1e69-4725-932e-db0a041a8fa2', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "reveniw breakdown by dept"\n\nI have gathered the following information using multiple analysis tools:\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'success\', \'operation\': \'aggregate\', \'data\': {\'message\': \'CSV data processed from document chunks\', \'content_summary\': \'Found 1 chunks with CSV content\', \'sample_content\': \'\'}}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:40:22,339 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:40:22,339 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:40:22,340 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:40:22,340 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:40:22,340 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:40:22,340 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:40:25,966 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:40:25 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:40:23Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:40:26Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:40:22Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:40:23Z'), (b'request-id', b'req_011CRhdt3V8M3v1bsxrtLibW'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882673bd8aac6f-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:40:25,968 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:40:25,968 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:40:25,969 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:40:25,969 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:40:25,969 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:40:25,969 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:40:25 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:40:23Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:40:26Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:40:22Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:40:23Z', 'request-id': 'req_011CRhdt3V8M3v1bsxrtLibW', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882673bd8aac6f-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:40:25,970 - anthropic._base_client - DEBUG - request_id: req_011CRhdt3V8M3v1bsxrtLibW
2025-08-01 16:40:25,972 - __main__ - INFO - Added assistant response to memory - length: 860
2025-08-01 16:40:25,972 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 9982ms, correlation_id: b0acf29a-4e91-4e76-893d-4ab607e9690a

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 6 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%', 'metadata': {'source': 'uploads/session_1754080727182_yxi2k6qz1/e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'file_type': 'CSV', 'file_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'chunk_index': 0}}], 'operation': 'aggregate', 'group_by': 'Department', 'metrics': ['Revenue']})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 3: create_chart({'data': {'status': 'success', 'operation': 'aggregate', 'data': {'message': 'CSV data processed from document chunks', 'content_summary': 'Found 1 chunks with CSV content', 'sample_content': ''}}, 'chart_type': 'bar', 'title': 'Revenue Breakdown by Department', 'x': 'Department', 'y': 'Revenue'})
INFO:     127.0.0.1:53588 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:40:58,543 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: create a visualisation of the table, correlation_id: 988c0993-9670-4e39-9145-2a32a412a29d
2025-08-01 16:40:58,544 - __main__ - INFO - Loaded memory context - short_term: 8, summaries: 3
2025-08-01 16:40:58,544 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:40:58,546 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-18b56b1b-7a56-4846-a414-3c27a147ed24', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'create a visualisation of the table\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🤖 ASSISTANT RESPONSE 1: Here is the breakdown of employees in each department:\n\n• Personal Banking: 1,200 employees\n• Corporate Banking: 450 employees \n• Digital Services: 350 employees\n• Wealth Management: 280 employees\n• Investment Banking: 180 employees\n\nPersonal Banking is clearly the largest department with 1,200 empl...\n\n🔹 USER QUERY 2: reveniw breakdown by dept\n\n🤖 ASSISTANT RESPONSE 3: Here\'s the revenue breakdown by department:\n\nRevenue by Department (in millions):\n1. Personal Banking: $320.8M (largest revenue generator)\n2. Investment Banking: $220.3M\n3. Corporate Banking: $180.5M\n4. Wealth Management: $95.2M\n5. Digital Services: $78.9M\n\nTotal Revenue: $895.7M\n\nKey Observations:\n...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "create a visualisation of the table"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:40:58,547 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:40:58,547 - httpcore.connection - DEBUG - close.started
2025-08-01 16:40:58,547 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:40:58,547 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:40:58,562 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x11737aa80>
2025-08-01 16:40:58,562 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:40:58,582 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x11737ba70>
2025-08-01 16:40:58,582 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:40:58,583 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:40:58,583 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:40:58,583 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:40:58,583 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:41:07,567 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:41:07 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:41:01Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:41:08Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:40:58Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:41:01Z'), (b'request-id', b'req_011CRhdviSjGfSvNqEjRCZwH'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968827564bc7ec6f-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:41:07,568 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:41:07,568 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:41:07,569 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:41:07,569 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:41:07,569 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:41:07,570 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:41:07 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:41:01Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:41:08Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:40:58Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:41:01Z', 'request-id': 'req_011CRhdviSjGfSvNqEjRCZwH', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968827564bc7ec6f-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:41:07,570 - anthropic._base_client - DEBUG - request_id: req_011CRhdviSjGfSvNqEjRCZwH
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0.
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 5.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,611 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 5.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,612 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,613 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,614 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,615 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,616 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,617 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,618 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,619 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,620 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0 to Arial ('/System/Library/Fonts/Supplemental/Arial.ttf') with score of 0.050000.
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=14.0.
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 5.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 5.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,627 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Users/saadahmed/Desktop/Apps/AWS_Extra/Agent/venv/lib/python3.13/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.525
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenian.ttf', name='.SF Armenian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,628 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,629 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.535
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.43475
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.535
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ADTNumeric.ttc', name='.SF Soft Numeric', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.25
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgian.ttf', name='.SF Georgian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,630 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrewRounded.ttf', name='.SF Hebrew Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.05
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.43475
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.33499999999999996
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.715
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,631 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.4775
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.145
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,632 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.71025
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFCamera.ttf', name='.SF Camera', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFGeorgianRounded.ttf', name='.SF Georgian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFHebrew.ttf', name='.SF Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.25
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.05
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.4775
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,633 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.43
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFArmenianRounded.ttf', name='.SF Armenian Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.62
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.05
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.335
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.24
2025-08-01 16:41:07,634 - matplotlib.font_manager - DEBUG - findfont: Matching sans\-serif:style=normal:variant=normal:weight=bold:stretch=normal:size=14.0 to Arial ('/System/Library/Fonts/Supplemental/Arial Bold.ttf') with score of 0.050000.
2025-08-01 16:41:07,815 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-080ed1ef-e9bb-4c58-88b9-9c3e0ee70104', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "create a visualisation of the table"\n\nI have gathered the following information using multiple analysis tools:\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:41:07,815 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:41:07,816 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:41:07,816 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:41:07,816 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:41:07,816 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:41:07,816 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:41:16,451 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:41:16 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:41:08Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:41:16Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:41:07Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:41:08Z'), (b'request-id', b'req_011CRhdwPvHLVLm6ie585FDC'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'9688278ffcf5ec6f-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:41:16,452 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:41:16,453 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:41:16,453 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:41:16,454 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:41:16,454 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:41:16,454 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:41:16 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:41:08Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:41:16Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:41:07Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:41:08Z', 'request-id': 'req_011CRhdwPvHLVLm6ie585FDC', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '9688278ffcf5ec6f-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:41:16,454 - anthropic._base_client - DEBUG - request_id: req_011CRhdwPvHLVLm6ie585FDC
2025-08-01 16:41:16,457 - __main__ - INFO - Added assistant response to memory - length: 1421
2025-08-01 16:41:16,457 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 17912ms, correlation_id: 988c0993-9670-4e39-9145-2a32a412a29d

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 8 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
  Executing Step 2: create_chart({'data': {'x': ['Personal Banking', 'Investment Banking', 'Corporate Banking', 'Wealth Management', 'Digital Services'], 'y': [320.8, 220.3, 180.5, 95.2, 78.9]}, 'chart_type': 'bar', 'title': 'Revenue by Department (in millions USD)'})
  Executing Step 3: create_chart({'data': {'x': ['Personal Banking', 'Corporate Banking', 'Digital Services', 'Wealth Management', 'Investment Banking'], 'y': [1200, 450, 350, 280, 180]}, 'chart_type': 'bar', 'title': 'Employee Count by Department'})
  Executing Step 4: create_comparison_chart({'datasets': {'Revenue (millions)': [320.8, 220.3, 180.5, 95.2, 78.9], 'Employees': [1200, 450, 350, 280, 180]}, 'chart_type': 'bar', 'title': 'Department Comparison - Revenue vs Employee Count'})
INFO:     127.0.0.1:53802 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:41:52,004 - __main__ - INFO - Frontend Chat request - session: session_1754080727182_yxi2k6qz1, query: caulauate revenue per employee, correlation_id: e362fd09-bc5c-4661-9d6b-6517e843a078
2025-08-01 16:41:52,006 - __main__ - INFO - Loaded memory context - short_term: 10, summaries: 3
2025-08-01 16:41:52,009 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:41:52,011 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-3989fc98-ca27-4a88-8ac0-0d278ca3f0db', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'caulauate revenue per employee\'\n- ACTIVE DOCUMENT: \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🤖 ASSISTANT RESPONSE 1: Here\'s the revenue breakdown by department:\n\nRevenue by Department (in millions):\n1. Personal Banking: $320.8M (largest revenue generator)\n2. Investment Banking: $220.3M\n3. Corporate Banking: $180.5M\n4. Wealth Management: $95.2M\n5. Digital Services: $78.9M\n\nTotal Revenue: $895.7M\n\nKey Observations:\n...\n\n🔹 USER QUERY 2: create a visualisation of the table\n\n🤖 ASSISTANT RESPONSE 3: I\'ll help you create a visualization of this banking data table using a combination of bar charts to effectively show the relationships between different metrics across departments.\n\n```python\n# Visualization using ASCII art since I can\'t create actual graphs\n                Revenue & Expenses by De...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "caulauate revenue per employee"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:41:52,012 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:41:52,012 - httpcore.connection - DEBUG - close.started
2025-08-01 16:41:52,013 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:41:52,013 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:41:52,027 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x135cdc130>
2025-08-01 16:41:52,027 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:41:52,048 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x135c96eb0>
2025-08-01 16:41:52,048 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:41:52,049 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:41:52,049 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:41:52,049 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:41:52,049 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:41:57,720 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:41:57 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'155000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:41:54Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:41:58Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:41:52Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'187000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:41:54Z'), (b'request-id', b'req_011CRhdzf7foM9R81ej3wvjm'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968828a46dccab4e-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:41:57,721 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:41:57,721 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:41:57,722 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:41:57,722 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:41:57,722 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:41:57,723 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:41:57 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '155000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:41:54Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:41:58Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:41:52Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '187000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:41:54Z', 'request-id': 'req_011CRhdzf7foM9R81ej3wvjm', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968828a46dccab4e-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:41:57,723 - anthropic._base_client - DEBUG - request_id: req_011CRhdzf7foM9R81ej3wvjm
2025-08-01 16:41:57,749 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-ff38acc7-d81e-492e-93d5-e81521c1cfd4', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': '\nUser Query: "caulauate revenue per employee"\n\nI have gathered the following information using multiple analysis tools:\n\n📊 DOCUMENT CONTENT (1 sections):\nSection 1: # CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1\n\n📈 TABLE ANALYSIS RESULTS:\n{\'status\': \'success\', \'operation\': \'calculate\', \'data\': {\'message\': \'CSV data processed from document chunks\', \'content_summary\': \'Found 1 chunks with CSV content\', \'sample_content\': \'\'}}\n\n\nPlease create a comprehensive, well-structured response that directly answers the user\'s query by intelligently combining the above information. \n\nRequirements:\n- Start with a direct answer to their question\n- Include the most relevant details from the analysis\n- Be concise but thorough\n- Use a professional, helpful tone\n- Structure the response logically\n\nFinal Response:'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:41:57,749 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:41:57,750 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:41:57,750 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:41:57,750 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:41:57,750 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:41:57,750 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:42:02,634 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:42:02 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'160000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:41:58Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:42:02Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:41:57Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'192000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:41:58Z'), (b'request-id', b'req_011CRhe15QutCAZwhJUPSsBc'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'968828c80ee9ab4e-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:42:02,635 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:42:02,635 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:42:02,636 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:42:02,636 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:42:02,636 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:42:02,637 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:42:02 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '160000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:41:58Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:42:02Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:41:57Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '192000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:41:58Z', 'request-id': 'req_011CRhe15QutCAZwhJUPSsBc', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '968828c80ee9ab4e-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:42:02,637 - anthropic._base_client - DEBUG - request_id: req_011CRhe15QutCAZwhJUPSsBc
2025-08-01 16:42:02,639 - __main__ - INFO - Added assistant response to memory - length: 957
2025-08-01 16:42:02,639 - __main__ - INFO - Chat response generated - session: session_1754080727182_yxi2k6qz1, processing_time: 10633ms, correlation_id: e362fd09-bc5c-4661-9d6b-6517e843a078

--- 🚀 Orchestrator Starting for Session session_1754080727182_yxi2k6qz1 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 10 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'retrieve_full_doc': True})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 2: process_table_data({'table_data': [{'page_content': '# CSV Data: e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\n\n        Department  Employees  Revenue_M  Expenses_M  Profit_M Growth_Rate\n Corporate Banking        450      180.5       145.2      35.3       12.5%\n  Personal Banking       1200      320.8       285.4      35.4        8.3%\n Wealth Management        280       95.2        67.8      27.4       15.7%\nInvestment Banking        180      220.3       165.9      54.4       22.1%\n  Digital Services        350       78.9        62.1      16.8       45.2%\n   Risk Management        125        0.0        28.5     -28.5          0%\n        Operations        800        5.2        95.6     -90.4       -2.1%\n        Technology        420       12.3       156.8    -144.5       18.9%\n   Human Resources         85        0.0        18.7     -18.7          0%\n         Marketing        120        2.1        45.3     -43.2       25.6%', 'metadata': {'source': 'uploads/session_1754080727182_yxi2k6qz1/e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'file_type': 'CSV', 'file_name': 'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv', 'chunk_index': 0}}], 'operation': 'calculate', 'formula': 'revenue/employees'})
    📎 Fallback: PREVIOUS_STEP_OUTPUT → previous step result
  Executing Step 3: create_chart({'data': {'status': 'success', 'operation': 'calculate', 'data': {'message': 'CSV data processed from document chunks', 'content_summary': 'Found 1 chunks with CSV content', 'sample_content': ''}}, 'chart_type': 'bar', 'title': 'Revenue per Employee by Department', 'x': 'Department', 'y': 'Revenue per Employee'})
INFO:     127.0.0.1:54036 - "POST /chat HTTP/1.1" 200 OK
2025-08-01 16:42:46,163 - python_multipart.multipart - DEBUG - Calling on_part_begin with no data
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_field with data[42:61]
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_value with data[63:115]
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_field with data[117:129]
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_value with data[131:146]
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_header_end with no data
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_headers_finished with no data
2025-08-01 16:42:46,164 - python_multipart.multipart - DEBUG - Calling on_part_data with data[150:98304]
2025-08-01 16:42:46,165 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:180224]
2025-08-01 16:42:46,165 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:65536]
2025-08-01 16:42:46,165 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:16384]
2025-08-01 16:42:46,166 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:16384]
2025-08-01 16:42:46,166 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:32768]
2025-08-01 16:42:46,166 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:32768]
2025-08-01 16:42:46,166 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:16384]
2025-08-01 16:42:46,167 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:16384]
2025-08-01 16:42:46,167 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:32768]
2025-08-01 16:42:46,167 - python_multipart.multipart - DEBUG - Calling on_part_data with data[0:46509]
2025-08-01 16:42:46,167 - python_multipart.multipart - DEBUG - Calling on_part_end with no data
2025-08-01 16:42:46,167 - python_multipart.multipart - DEBUG - Calling on_end with no data
2025-08-01 16:42:46,167 - __main__ - INFO - File upload request - session: session_1754080958734_iv5zsylm0, file: car24_chpt1_0.pdf, correlation_id: a1a71ead-e0af-4226-a300-891e4ef92e1c
2025-08-01 16:42:46,454 - __main__ - INFO - Document processing result - session: session_1754080958734_iv5zsylm0, result: {'status': 'error', 'message': '1 validation error for Document\npage_content\n  Input should be a valid string [type=string_type, input_value=Document(metadata={\'Heade...ity (TLAC) Guideline ."), input_type=Document]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type'}, correlation_id: a1a71ead-e0af-4226-a300-891e4ef92e1c
2025-08-01 16:42:46,454 - __main__ - INFO - File uploaded and processed - session: session_1754080958734_iv5zsylm0, chunks: 0, stored_as: car24_chpt1_0.pdf, correlation_id: a1a71ead-e0af-4226-a300-891e4ef92e1c
INFO:     127.0.0.1:54294 - "POST /upload?session_id=session_1754080958734_iv5zsylm0 HTTP/1.1" 200 OK
2025-08-01 16:42:51,061 - __main__ - INFO - Frontend Chat request - session: session_1754080958734_iv5zsylm0, query: summarise this document, correlation_id: c6590328-1e04-4c90-9ab1-1b42aaf28380
2025-08-01 16:42:51,063 - __main__ - INFO - Loaded memory context - short_term: 7, summaries: 3
2025-08-01 16:42:51,064 - orchestrator - INFO - Orchestrator LLM initialized successfully: claude-3-5-sonnet-20241022
2025-08-01 16:42:51,066 - anthropic._base_client - DEBUG - Request options: {'method': 'post', 'url': '/v1/messages', 'files': None, 'idempotency_key': 'stainless-python-retry-5b677990-b49f-4516-a74f-e44c74a8fe66', 'json_data': {'max_tokens': 1024, 'messages': [{'role': 'user', 'content': 'You are a world-class AI assistant. Your goal is to create a step-by-step plan to answer the user\'s query.\n\n🔥 CRITICAL RULE: The CONVERSATION HISTORY is automatically provided above. For follow-up questions referencing "previous", "earlier", "based on", "mentioned", etc., READ the conversation history directly - NO need to call search_conversation_history.\n\nYou have access to the following tools. Respond with a JSON object containing a \'plan\' which is a list of steps. Each step should have:\n- "thought": Your reasoning for this step\n- "tool": The tool name (only use tools from the list below)\n- "params": Object with the tool parameters (use the exact parameter names from signatures)\n\n🎯 PROVEN WORKFLOWS (90% success rate - USE THESE PATTERNS):\n\n1. WORD COUNTING/FREQUENCY:\n   Query: "count of word risk", "how many times is X mentioned", "word frequency"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=50, min_length=1)\n   ⚠️ CRITICAL: Use extract_key_phrases for word counts, analyze_text_metrics for general stats!\n\n2. DOCUMENT SUMMARY:\n   Query: "summarize document", "overview"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="refine", length="two paragraphs")\n\n3. SECTION EXTRACTION:\n   Query: "explain X section", "find information about Y"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", query="KEY_TERMS")\n   Step 2: synthesize_content(chunks="CHUNKS_FROM_STEP_1", method="map_reduce", length="one paragraph")\n\n4. KEY CONCEPTS:\n   Query: "main topics", "key concepts", "important themes"\n   Proven Pattern:\n   Step 1: search_uploaded_docs(doc_name="ACTIVE_DOCUMENT", retrieve_full_doc=True)\n   Step 2: extract_key_phrases(text="EXTRACT_PAGE_CONTENT_FROM_STEP_1", top_n=10)\n\n🚨 CRITICAL DATA FLOW RULES:\n- search_uploaded_docs returns: [{"page_content": "text...", "metadata": {...}}]\n- Text analytics tools (analyze_text_metrics, extract_key_phrases, analyze_sentiment) need: "text string"\n- Synthesis tools (synthesize_content) need: chunk arrays\n- ALWAYS extract chunks[0]["page_content"] when passing to text analytics!\n\nAvailable tools:\n\n- Tool: upload_document\n  Signature: upload_document(file_path: str) -> dict\n  Description: Processes a single document (PDF, DOCX, TXT, CSV) from a local file path, chunks it, and stores it in the in-memory store for the current session. Returns a confirmation message with the document name.\n\n- Tool: discover_document_structure\n  Signature: discover_document_structure(doc_name: str) -> dict\n  Description: Scans a previously uploaded document to identify its structure, such as headers, sections, and page numbers. Returns a dictionary containing lists of headers and other metadata keys.\n\n- Tool: search_uploaded_docs\n  Signature: search_uploaded_docs(doc_name: str, query: str = None, filter_by_page: list[int] = None, filter_by_metadata: dict = None, retrieve_full_doc: bool = False) -> list\n  Description: Performs a direct keyword search on the content of a specific uploaded document. Can filter results by page number or metadata (e.g., {\'Header 1\': \'Introduction\'}). Setting retrieve_full_doc=True returns all chunks. Returns a list of matching text chunks.\n\n- Tool: synthesize_content\n  Signature: synthesize_content(chunks: list, method: str, length: str, tone: str = \'professional\') -> str\n  Description: Generates a cohesive text based on a list of input chunks. The method determines the synthesis strategy (\'simple_llm_call\', \'refine\', \'map_reduce\'). Length specifies the desired output size (e.g., \'summary\', \'one paragraph\', \'bullet points\'). Returns the synthesized text.\n\n- Tool: search_knowledge_base\n  Signature: search_knowledge_base(query: str) -> list\n  Description: Performs a semantic search over the long-term knowledge base. Use for general questions or to find information not present in the recently uploaded documents.\n\n- Tool: search_conversation_history\n  Signature: search_conversation_history(query: str) -> list\n  Description: Searches the history of the current conversation to recall previous statements or results.\n\n- Tool: execute_python_code\n  Signature: execute_python_code(code: str, context: dict = None) -> dict\n  Description: Executes Python code safely for data analysis, calculations, and processing. Supports pandas, numpy, matplotlib, and basic statistics. Returns execution results, output, and any errors.\n\n- Tool: process_table_data\n  Signature: process_table_data(table_data: list, operation: str, **kwargs) -> dict\n  Description: Processes table/CSV data using pandas operations. Supports summary, aggregate, filter, and pivot operations. Input should be list of dictionaries (table rows).\n\n- Tool: calculate_statistics\n  Signature: calculate_statistics(data: list, metrics: list = None) -> dict\n  Description: Calculates statistical metrics (mean, median, std, min, max, quantiles) for numerical data. Useful for analyzing extracted numbers from documents.\n\n- Tool: create_chart\n  Signature: create_chart(data: dict, chart_type: str, title: str = \'\', save_path: str = None, **kwargs) -> dict\n  Description: Creates charts and graphs from data. Supports bar, line, pie, scatter, histogram charts. Data should have \'x\' and \'y\' keys. Returns base64 encoded image and saves to file if path provided.\n\n- Tool: create_wordcloud\n  Signature: create_wordcloud(text: str, max_words: int = 100, save_path: str = None, **kwargs) -> dict\n  Description: Generates word clouds from text content. Great for visualizing key terms and themes in documents. Returns base64 encoded image and top words list.\n\n- Tool: create_statistical_plot\n  Signature: create_statistical_plot(data: list, plot_type: str = \'box\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates statistical plots (box, distribution, violin) for numerical data analysis. Useful for visualizing data distributions from extracted tables.\n\n- Tool: create_comparison_chart\n  Signature: create_comparison_chart(datasets: dict, chart_type: str = \'bar\', title: str = \'\', save_path: str = None) -> dict\n  Description: Creates comparison charts with multiple datasets. Input datasets as {name: [values]} dictionary. Supports bar and line comparison charts.\n\n- Tool: analyze_text_metrics\n  Signature: analyze_text_metrics(text: str) -> dict\n  Description: Analyzes comprehensive text metrics including readability scores, word counts, sentence structure, and lexical diversity. Includes Flesch reading ease and other standard metrics.\n\n- Tool: extract_key_phrases\n  Signature: extract_key_phrases(text: str, top_n: int = 10, min_length: int = 2) -> dict\n  Description: Extracts key words, phrases, and important terms from text. Returns top words, bigrams, and trigrams with frequency counts. Useful for theme analysis.\n\n- Tool: analyze_sentiment\n  Signature: analyze_sentiment(text: str) -> dict\n  Description: Performs sentiment analysis on text content. Returns sentiment score (-1 to 1), classification (positive/negative/neutral), and confidence measures.\n\n- Tool: extract_entities\n  Signature: extract_entities(text: str) -> dict\n  Description: Extracts named entities from text including emails, phone numbers, URLs, dates, money amounts, percentages, and potential proper nouns.\n\n\nSTRATEGY GUIDANCE:\n\nFor COMPREHENSIVE ANALYSIS queries (e.g., "give me all X", "list all Y", "summarize entire document"):\n1. Use search_uploaded_docs with retrieve_full_doc=True to get ALL chunks  \n2. Use synthesize_content with method="refine" for systematic analysis\n3. DO NOT use search queries - process the entire document\n\nFor TARGETED SEARCH queries (e.g., "find mentions of X", "search for Y"):\n1. Use search_uploaded_docs with specific query terms\n2. Use synthesize_content with method="map_reduce" for search results\n\nFor SECTION-SPECIFIC queries (e.g., "summarize section X"):  \n1. First discover_document_structure to see available sections\n2. Use search_uploaded_docs with filter_by_metadata for the specific section\n3. If no section found, suggest searching entire document\n\nExample - COMPREHENSIVE ANALYSIS:\n{\n  "plan": [\n    {\n      "thought": "User wants ALL regulations from the document, so I need to analyze the entire document systematically",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "retrieve_full_doc": true}\n    },\n    {\n      "thought": "Now I\'ll use refine method to systematically extract all regulations from all chunks",\n      "tool": "synthesize_content", \n      "params": {"chunks": "PREVIOUS_STEP_OUTPUT", "method": "refine", "length": "bullet points"}\n    }\n  ]\n}\n\nExample - TARGETED SEARCH:\n{\n  "plan": [\n    {\n      "thought": "User wants to find specific mentions, so I\'ll search for relevant terms",\n      "tool": "search_uploaded_docs",\n      "params": {"doc_name": "document.txt", "query": "search term"}\n    }\n  ]\n}\n\n\n\nCurrent State:\n- Loaded Docs: [\'persist_test.txt\', \'e2e_test_document.txt\', \'test_lamaindex\', \'riskandfinace.pdf\', \'tmpbyslc_ok.pdf\', \'tmpdr1bkiab.pdf\', \'test-document.txt\', \'4fd048f0-8cc3-424b-903e-76da5b7d07be_test-document.txt\', \'7b8dd658-1f1c-4a49-aef8-f9ed07d18990_test-document.txt\', \'bd7f0a4e-5cb0-417e-bf0a-99aa6a2216e1_test-document.txt\', \'a2243a48-e0b5-44e8-b65e-94900bee3e21_test-document.txt\', \'bd0bc6d4-f1d8-4d82-b5f3-ad330f6695e9_test-document.txt\', \'af112d8a-b14d-474e-a733-3e1c57269e05_test-document.txt\', \'1cd16304-4aec-4f29-92d5-e0c8e5b88dad_test-document.txt\', \'78f95d8c-46c3-4b06-88b0-18f27ac34b27_test-document.txt\', \'6f2241da-4233-4c65-8949-1f2911d10a65_test-document.txt\', \'de3e2e08-f2ca-4a26-bec6-39dcf2112167_test-document.txt\', \'edc761b0-db0f-4b7e-8ef7-35ad89e2e9b5_test-document.txt\', \'99fd8457-70a7-4417-9f35-0b080c717fe7_test-document.txt\', \'702ae8fe-0f5f-47ab-ac96-d517214f7384_test-document.txt\', \'3382d9be-4f71-4b68-af69-9bed32019cfb_test-document.txt\', \'be626782-c7ca-44d2-8f6d-cd8f3f40a287_test-document.txt\', \'eb203d5d-97e0-4ff1-b7a9-70de29bf2a1a_test-document.txt\', \'e4a28631-fcae-4bbc-9a3e-39f028e5fe73_test-document.txt\', \'2d81faaf-604f-48dc-b0b9-4ff275a2ab8e_test-document.txt\', \'048ba78c-96a8-4224-a653-a634b5690308_test-document.txt\', \'b4bfaa0f-7598-4adc-846c-2cb7a3631571_test-document.txt\', \'131e751f-b393-4190-a42c-250bb8333ef6_test-document.txt\', \'6f53aa7f-8026-41e8-9408-a0ae73be507c_test-document.txt\', \'4679a7d1-5264-46d1-a9ae-54ab4313ba88_test-document.txt\', \'ff7fe6f7-9f7b-4f04-9e03-df8b2466f721_test-document.txt\', \'c8c6f426-89e6-4ec0-aa43-ef590ae2a063_test-document.txt\', \'a4ede6cd-56d7-4b66-b87c-636d743687e5_test-document.txt\', \'519d052e-459b-4fef-8ca9-fe70437054e7_test-document.txt\', \'ed612a01-1ee6-4d01-af60-f6299c565b5c_test-document.txt\', \'c50767f7-448d-49a0-b48c-40cbdca4c0f3_test-document.txt\', \'8c172d11-f048-4326-ae5e-51554e52df4e_test-document.txt\', \'38ebc68f-898c-454c-9886-ca1a581f9c20_test-document.txt\', \'fd4c12fc-3f72-4807-b04b-c8d52270c568_test-document.txt\', \'d4445e21-723f-4147-b376-1da294245b94_test-document.txt\', \'9c9a7bf8-32b8-4048-b7cb-ca1ded0681e3_test-document.txt\', \'a264827c-2a21-4157-a802-2cf4eb9029c3_test-document.txt\', \'5b96e0d9-6ca2-42a0-9793-eba261a697fb_test-document.txt\', \'76bf121e-04e9-4025-be1b-1ce517a8109f_test-document.txt\', \'bccd81d3-6148-4fb7-97ef-520fff15e65e_test-document.txt\', \'c5ac0101-1dde-4fcd-87fc-073c23b5a25e_test-document.txt\', \'d14b8fc1-0efb-4c00-be81-cfc5b594dbfb_test-document.txt\', \'c1fd781c-7c14-4442-bb5b-e9b63e3f37cb_test_business_data.csv\', \'ec0c8c32-cd60-4183-860b-99f16b29f7bc_test_business_data.csv\', \'9cb7a5c4-2bf4-4261-9e09-faa8710d4e4c_test_business_data.csv\', \'66ef3504-e1c4-47be-9b6c-d596cf81308d_test_business_data.csv\', \'5a47c23c-5b57-414f-8192-6e2ee266306f_test_business_data.csv\', \'690d2b68-95fd-442d-87aa-f8e8f0a60ef8_test-document.txt\', \'8a756c33-1024-435b-826e-419c198e4030_test-document.txt\', \'a015fd2b-3e10-4c61-9e81-c166374b8e02_test-document.txt\', \'2c15d38b-2a13-4fff-b218-4896fdf986da_test_business_data.csv\', \'628a1a52-5fed-401f-9587-da0406026e31_bmo_quarterly_review.docx\', \'a6fc66fd-e534-4b3e-8528-184b453ff981_test-document.txt\', \'1311fb23-2c3b-4e28-a06a-33bf949599aa_test-document.txt\', \'71003ffb-957a-437a-a4e0-8ffdf5ef784a_test_business_data.csv\', \'dc03e586-82c2-48bd-ab3d-01030d414aa2_bmo_quarterly_review.docx\', \'4fa6a850-049b-437c-b093-637b7ef4bac7_test-document.txt\', \'258d3ad6-d5a7-4b15-ae27-bfffb672ead3_bmo_quarterly_review.docx\', \'dd9a0262-1548-4e2d-9a21-e72b6f8622fe_test_business_data.csv\', \'75c80c52-5033-44ac-9637-558cbf117712_test-document.txt\', \'3bc9c8ea-a8c2-4045-8064-532faefdee50_test-document.txt\', \'b630ff35-f689-45ff-b1b0-013e996aca71_test-document.txt\', \'b237d7d1-f161-4860-b228-dec9f8b422b4_test_business_data.csv\', \'51f47378-edbe-4130-9b8d-167d8726f904_test_business_data.csv\', \'547db662-9ef1-4a20-aacf-1b16d12ed13c_test_business_data.csv\', \'1354c1f4-ac6c-407c-9e4b-1753fb696cb1_test-document.txt\', \'18559c18-9b3a-4184-9ad9-25b61327657d_test-document.txt\', \'da89533a-92a4-4e22-9e92-45fee34e7bb5_test-document.txt\', \'e66e6241-eeb7-4859-a1ed-c0f81a369759_test_business_data.csv\', \'7ff75643-5c63-49ab-9e11-c2e62d3445da_test-document.txt\', \'a2f57747-7b94-4420-807e-069bbe9ed2f3_test-document.txt\', \'541ba867-8acb-4d44-b4b6-f3c49d865451_test-document.txt\', \'aa045322-a40b-4155-a8ed-902c002e568d_test-document.txt\', \'7dc1a0cc-37d9-4d86-b977-026110e07d09_test-document.txt\', \'0210d7f6-964f-440e-853a-be1f2d3bda9c_test-document.txt\', \'87d80b62-e28e-40f2-a5e4-c18e8b448b59_test-document.txt\', \'a9e3d0b2-37e3-40fb-b645-f7498b833cfc_test-document.txt\', \'fcd8eb12-7ebc-41c6-acaf-6da929ad28b6_test-document.txt\', \'ad02a2cc-59ad-4280-87c0-8dc28ccacb0c_test-document.txt\', \'16ec973e-527b-4b7b-8f80-66686b422aad_test-document.txt\', \'7e44a792-b43e-4a97-8da5-a30311e4d46c_test-document.txt\', \'0e378fef-48f7-4ccd-a7e2-da2aaaa35837_test-document.txt\', \'1e70562f-f6ed-4914-9141-ea3ef6a0ad0c_test-document.txt\', \'bd356890-dbbe-412e-b433-8bc5ba563ba2_test-document.txt\', \'e97dafde-4670-4ec1-b9a6-87018c29df1b_test_document.txt\', \'0f743eaf-f73d-45c0-a225-1efc41e5e3cf_sample_data.csv\', \'fd8acb10-e010-41dc-87d2-4e888784f10d_test_document.txt\', \'05cdd587-b4da-47ea-8493-098fe735f011_sample_data.csv\', \'fd5051c0-d643-4594-9323-b414aa9e3e27_test_document.txt\', \'c5ace5df-a07e-4148-9ca9-3d265e37302e_test_document.txt\', \'e67af61c-2f5c-41f0-b2f5-800c31fe423d_test_document.txt\', \'f2b564a1-d975-4ea8-a0ad-0320df308302_sample_data.csv\', \'e64fba6c-6433-42b4-829a-38e31313bdee_sample_data.csv\', \'61446d7b-26a5-4d89-adbb-5ce0bffc82ee_sample_data.csv\', \'b62e7a2a-fd0a-4194-81c3-140105f9f347_sample_data.csv\', \'05ae6ee8-02e2-411c-a7b4-7750e0feeb4e_test_document.txt\', \'0617e5ed-6f69-4e30-9a12-88bc439b503d_sample_data.csv\', \'sample_data.csv\', \'3c88b7dc-0b87-4d9c-a2e4-ab4f11d7236d_test_document.txt\', \'03ffa571-8e91-4caf-b04b-d57e09d4e41b_sample_data.csv\', \'74fe243c-dcbb-4d3e-9444-ed378ad3fe62_test_business_data.csv\', \'ee2ed60e-95e1-4843-b666-fe79a6fcd859_test_business_data.csv\', \'6a2eaa9c-2c25-4e05-a5ae-af50bf973d90_test_business_data.csv\', \'f036d3bf-487c-485f-94a4-92970a7bb2cf_sample_data.csv\', \'54455d77-dc80-4239-8229-af146f02acc4_test_document.txt\', \'3cf87067-422f-41fb-abf6-bb5b7396df97_sample_data.csv\', \'8fdcf45d-ccf8-4727-a81a-3c1eb71f1689_test_document.txt\', \'86c89c74-54c1-4b38-88a6-4d457b932deb_sample_data.csv\', \'174ffbb1-1dfa-4854-88f4-807fc76cb1b7_sample_data.csv\', \'58479d55-8b3c-43aa-909e-6d35bc0630a6_sample_data.csv\', \'2e888bf3-5ba8-47b3-b6fc-c647181c55c7_sample_data.csv\', \'96d946d0-af4d-43ca-8ea9-8170885ffa75_sample_data.csv\', \'431aadd5-5f55-48d2-961a-9aa727ab6738_sample_data.csv\', \'a95e00f7-0a30-4a45-a29a-af4905dea4c7_sample_data.csv\', \'fe667864-9558-4e39-92ce-7e3f814bce29_sample_data.csv\', \'008b45c6-d19c-43fa-8064-27e0beaf92d3_sample_data.csv\', \'1000a8e0-7da1-4563-b1b5-210730f00769_sample_data.csv\', \'beaca8b1-e4ad-473f-99dd-5601bc18c711_sample_data.csv\', \'23c94a3e-fd77-481f-a214-962f97e34f75_sample_data.csv\', \'c9cd9f7e-9bc3-4f05-9e83-99f93191deab_sample_data.csv\', \'8a105bd3-ea43-4236-8e5a-87f2e097a455_sample_data.csv\', \'c73de0a1-4890-4156-9362-c127b2fcdb35_sample_data.csv\', \'633b7599-c282-4356-992d-c9a57b305fc4_sample_data.csv\', \'6bf16ebd-61a2-4c51-bbf2-f11d2a08ac8b_sample_data.csv\', \'bcd25bfe-8d62-4991-9667-a85e928a6def_sample_data.csv\', \'74cdf4a0-58cc-4eb3-84d2-951c03a674b1_sample_data.csv\', \'ccb1f0e7-0a3f-4b6f-a04b-7a0bf5963254_sample_data.csv\', \'6a776513-d7e5-43f7-aa68-3c0ffffcb309_sample_data.csv\', \'e036fff4-9441-453d-9d9d-c7ff817c6d6e_test_business_data.csv\']\n- User Query: \'summarise this document\'\n- ACTIVE DOCUMENT: \'car24_chpt1_0.pdf\' (PRIORITIZE this document for analysis)\n\n============================================================\n📋 PREVIOUS CONVERSATION (Last 3 messages):\n============================================================\n\n🔹 USER QUERY 1: caulauate revenue per employee\n\n🔹 USER QUERY 2: caulauate revenue per employee\n\n🤖 ASSISTANT RESPONSE 3: I\'ll help you calculate the revenue per employee for each department.\n\nRevenue Per Employee Breakdown:\n- Corporate Banking: $401,111 per employee ($180.5M ÷ 450)\n- Personal Banking: $267,333 per employee ($320.8M ÷ 1,200)\n- Wealth Management: $340,000 per employee ($95.2M ÷ 280)\n- Investment Banking...\n\n============================================================\n\n\n🎯 CURRENT USER QUERY: "summarise this document"\n\nPlease create a plan to answer the current query, using conversation history when relevant.'}], 'model': 'claude-3-5-sonnet-20241022', 'temperature': 0.0}}
2025-08-01 16:42:51,067 - anthropic._base_client - DEBUG - Sending HTTP Request: POST https://api.anthropic.com/v1/messages
2025-08-01 16:42:51,067 - httpcore.connection - DEBUG - close.started
2025-08-01 16:42:51,068 - httpcore.connection - DEBUG - close.complete
2025-08-01 16:42:51,068 - httpcore.connection - DEBUG - connect_tcp.started host='api.anthropic.com' port=443 local_address=None timeout=None socket_options=None
2025-08-01 16:42:51,120 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x1277046d0>
2025-08-01 16:42:51,121 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x1170bfd10> server_hostname='api.anthropic.com' timeout=None
2025-08-01 16:42:51,141 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x11743e990>
2025-08-01 16:42:51,141 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-08-01 16:42:51,142 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-08-01 16:42:51,142 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-08-01 16:42:51,142 - httpcore.http11 - DEBUG - send_request_body.complete
2025-08-01 16:42:51,142 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-08-01 16:42:58,652 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Fri, 01 Aug 2025 20:42:58 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'anthropic-ratelimit-input-tokens-limit', b'160000'), (b'anthropic-ratelimit-input-tokens-remaining', b'157000'), (b'anthropic-ratelimit-input-tokens-reset', b'2025-08-01T20:42:54Z'), (b'anthropic-ratelimit-output-tokens-limit', b'32000'), (b'anthropic-ratelimit-output-tokens-remaining', b'32000'), (b'anthropic-ratelimit-output-tokens-reset', b'2025-08-01T20:42:59Z'), (b'anthropic-ratelimit-requests-limit', b'2000'), (b'anthropic-ratelimit-requests-remaining', b'1999'), (b'anthropic-ratelimit-requests-reset', b'2025-08-01T20:42:51Z'), (b'anthropic-ratelimit-tokens-limit', b'192000'), (b'anthropic-ratelimit-tokens-remaining', b'189000'), (b'anthropic-ratelimit-tokens-reset', b'2025-08-01T20:42:54Z'), (b'request-id', b'req_011CRhe51i2HPFa4EkgXz7W1'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'anthropic-organization-id', b'31219faf-91cc-482b-93f4-cc5aadc25785'), (b'via', b'1.1 google'), (b'cf-cache-status', b'DYNAMIC'), (b'X-Robots-Tag', b'none'), (b'Server', b'cloudflare'), (b'CF-RAY', b'96882a15be1436db-YYZ'), (b'Content-Encoding', b'gzip')])
2025-08-01 16:42:58,654 - httpx - INFO - HTTP Request: POST https://api.anthropic.com/v1/messages "HTTP/1.1 200 OK"
2025-08-01 16:42:58,654 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-08-01 16:42:58,655 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-08-01 16:42:58,655 - httpcore.http11 - DEBUG - response_closed.started
2025-08-01 16:42:58,655 - httpcore.http11 - DEBUG - response_closed.complete
2025-08-01 16:42:58,656 - anthropic._base_client - DEBUG - HTTP Response: POST https://api.anthropic.com/v1/messages "200 OK" Headers({'date': 'Fri, 01 Aug 2025 20:42:58 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'anthropic-ratelimit-input-tokens-limit': '160000', 'anthropic-ratelimit-input-tokens-remaining': '157000', 'anthropic-ratelimit-input-tokens-reset': '2025-08-01T20:42:54Z', 'anthropic-ratelimit-output-tokens-limit': '32000', 'anthropic-ratelimit-output-tokens-remaining': '32000', 'anthropic-ratelimit-output-tokens-reset': '2025-08-01T20:42:59Z', 'anthropic-ratelimit-requests-limit': '2000', 'anthropic-ratelimit-requests-remaining': '1999', 'anthropic-ratelimit-requests-reset': '2025-08-01T20:42:51Z', 'anthropic-ratelimit-tokens-limit': '192000', 'anthropic-ratelimit-tokens-remaining': '189000', 'anthropic-ratelimit-tokens-reset': '2025-08-01T20:42:54Z', 'request-id': 'req_011CRhe51i2HPFa4EkgXz7W1', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'anthropic-organization-id': '31219faf-91cc-482b-93f4-cc5aadc25785', 'via': '1.1 google', 'cf-cache-status': 'DYNAMIC', 'x-robots-tag': 'none', 'server': 'cloudflare', 'cf-ray': '96882a15be1436db-YYZ', 'content-encoding': 'gzip'})
2025-08-01 16:42:58,656 - anthropic._base_client - DEBUG - request_id: req_011CRhe51i2HPFa4EkgXz7W1
2025-08-01 16:42:58,658 - tools.synthesis_tools - INFO - Synthesizing 1 chunks using method 'refine' for query: 'summarise this document'.
2025-08-01 16:42:58,658 - orchestrator - ERROR - Error during plan execution: 'page_content'
2025-08-01 16:42:58,658 - __main__ - INFO - Chat response generated - session: session_1754080958734_iv5zsylm0, processing_time: 7596ms, correlation_id: c6590328-1e04-4c90-9ab1-1b42aaf28380

--- 🚀 Orchestrator Starting for Session session_1754080958734_iv5zsylm0 ---

--- 🤔 Asking LLM for a plan ---
📝 Prompt includes conversation history: 7 messages

--- ⚡ Acting: Parsing and Executing the plan ---
  Executing Step 1: search_uploaded_docs({'doc_name': 'car24_chpt1_0.pdf', 'retrieve_full_doc': True})
    📎 Tool-specific fix: PREVIOUS_STEP_OUTPUT → document chunks for synthesis
  Executing Step 2: synthesize_content({'chunks': [{'error': "Doc 'car24_chpt1_0.pdf' not found."}], 'method': 'refine', 'length': 'two paragraphs', 'tone': 'professional'})
INFO:     127.0.0.1:54294 - "POST /chat HTTP/1.1" 200 OK
