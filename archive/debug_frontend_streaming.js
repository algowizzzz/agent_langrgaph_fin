/**\n * Frontend Streaming Debug Script\n * Run this in your browser console while on localhost:3000\n * to test the streaming functionality directly\n */\n\nfunction testFrontendStreaming() {\n  console.log('🚀 Testing Frontend Streaming...');\n  \n  const testRequest = {\n    query: \"Hello streaming debug test\",\n    session_id: \"debug_test_\" + Date.now(),\n    active_documents: []\n  };\n  \n  console.log('📤 Sending request:', testRequest);\n  \n  let stepCount = 0;\n  let receivedFinalAnswer = false;\n  let receivedComplete = false;\n  \n  // Test the streaming API directly\n  fetch('http://localhost:8000/chat/stream', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(testRequest),\n  })\n  .then(response => {\n    console.log('📥 Response status:', response.status);\n    console.log('📥 Response headers:', response.headers);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('No response body reader available');\n    }\n    \n    const decoder = new TextDecoder();\n    let buffer = '';\n    \n    function readStream() {\n      return reader.read().then(({ done, value }) => {\n        if (done) {\n          console.log('✅ Stream completed normally');\n          if (!receivedComplete) {\n            console.warn('⚠️ Stream ended without receiving \"complete\" event');\n          }\n          return;\n        }\n        \n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n        \n        for (const line of lines) {\n          if (line.trim() === '') continue;\n          \n          console.log('📄 Raw line:', line);\n          \n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6)); // Remove 'data: ' prefix\n              console.log('📊 Parsed data:', data);\n              \n              if (data.type === 'reasoning_step' || data.type === 'status') {\n                stepCount++;\n                console.log(`🧠 Reasoning step ${stepCount}:`, data.message);\n              } else if (data.type === 'final_answer') {\n                receivedFinalAnswer = true;\n                console.log('🎯 Final answer received:', data.content.substring(0, 100) + '...');\n              } else if (data.type === 'error') {\n                console.error('❌ Error received:', data.message);\n                return;\n              } else if (data.type === 'complete') {\n                receivedComplete = true;\n                console.log('✅ Complete event received');\n                console.log(`📊 Summary: ${stepCount} steps, final answer: ${receivedFinalAnswer}`);\n                return;\n              }\n            } catch (parseError) {\n              console.error('🚨 Failed to parse streaming data:', line, parseError);\n            }\n          }\n        }\n        \n        return readStream(); // Continue reading\n      });\n    }\n    \n    return readStream();\n  })\n  .catch(error => {\n    console.error('🚨 Streaming error:', error);\n  });\n}\n\n// Auto-run the test\nconsole.log('🔧 Frontend Streaming Debug Script Loaded');\nconsole.log('💡 Run testFrontendStreaming() to test streaming manually');\nconsole.log('💡 Or we\\'ll auto-run it in 2 seconds...');\n\nsetTimeout(() => {\n  testFrontendStreaming();\n}, 2000);